{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Technical Documentation Hub","text":"<p>Welcome to comprehensive technical documentation covering Java development, database operations, system design, and high-performance messaging systems.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":""},{"location":"#core-technologies","title":"Core Technologies","text":"<ul> <li>Java Development - Memory management, concurrency patterns, and threading best practices</li> <li>KDB+ Database - Time-series database operations, setup guides, and integration examples  </li> <li>System Design - Architecture patterns, IPC mechanisms, and design principles</li> <li>Aeron Messaging - High-performance messaging protocols and low-latency communication</li> </ul>"},{"location":"#development-tools","title":"Development &amp; Tools","text":"<ul> <li>Spring Boot - Application frameworks and multi-module Maven projects</li> <li>Linux Operations - Command reference and system administration</li> <li>Setup Guides - Environment configuration for Python, SSH, and development tools</li> <li>Productivity Tools - AI assistance and development workflow optimization</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to the Documentation?</p> <p>Start with the setup guides to configure your development environment, then explore topics by category above.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Beginners: Start with Java basics and setup guides</li> <li>Database work: Jump to KDB+ documentation </li> <li>System architecture: Explore system design concepts</li> <li>Performance optimization: Check out Aeron messaging guides</li> </ul>"},{"location":"#development-commands","title":"Development Commands","text":"<p>For contributors and maintainers:</p> <pre><code># Start local development server\npython write_timestamp.py &amp;&amp; mkdocs serve\n\n# Build documentation site  \nmkdocs build\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy --force\n</code></pre>"},{"location":"aeron/","title":"Aeron Messaging","text":"<p>Welcome to Aeron documentation covering high-performance messaging protocols and low-latency communication patterns.</p>"},{"location":"aeron/#overview","title":"Overview","text":"<p>Aeron is a high-performance messaging library designed for low-latency, high-throughput applications. It's particularly well-suited for financial systems, real-time analytics, and distributed systems requiring reliable message delivery.</p>"},{"location":"aeron/#core-topics","title":"Core Topics","text":""},{"location":"aeron/#fundamentals","title":"Fundamentals","text":"<ul> <li>Why Aeron? - Advantages and use cases for Aeron messaging</li> <li>MDC vs Unicast - Understanding Multi-Destination-Cast vs traditional unicast patterns</li> </ul>"},{"location":"aeron/#integration-examples","title":"Integration Examples","text":"<ul> <li>Artio Fix Integration - Real-world implementation with Coinbase Fix API</li> </ul>"},{"location":"aeron/#key-features","title":"Key Features","text":""},{"location":"aeron/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Low Latency: Optimized for microsecond-level messaging</li> <li>High Throughput: Handles millions of messages per second</li> <li>Zero Copy: Efficient memory usage patterns</li> <li>Mechanical Sympathy: Hardware-aware design</li> </ul>"},{"location":"aeron/#communication-patterns","title":"Communication Patterns","text":"<ul> <li>Unicast: Point-to-point reliable messaging</li> <li>Multi-Destination-Cast (MDC): Efficient one-to-many communication</li> <li>Publication/Subscription: Event-driven messaging patterns</li> </ul>"},{"location":"aeron/#getting-started","title":"Getting Started","text":"<p>New to Aeron?</p> <p>Start with Why Aeron? to understand the advantages, then explore MDC vs Unicast to choose the right communication pattern.</p>"},{"location":"aeron/#learning-path","title":"Learning Path","text":"<ol> <li>Understand the Advantages - Learn why choose Aeron over other messaging solutions</li> <li>Communication Patterns - Study MDC vs Unicast trade-offs</li> <li>Real-world Examples - Explore Artio integration implementations</li> <li>Performance Tuning - Apply optimization techniques for your use case</li> </ol>"},{"location":"aeron/#use-cases","title":"Use Cases","text":""},{"location":"aeron/#ideal-applications","title":"Ideal Applications","text":"<ul> <li>Financial Trading Systems - Low-latency order processing and market data</li> <li>Real-time Analytics - High-frequency data processing pipelines  </li> <li>Distributed Systems - Reliable inter-service communication</li> <li>Gaming Infrastructure - Real-time multiplayer game state synchronization</li> </ul>"},{"location":"aeron/#when-to-choose-aeron","title":"When to Choose Aeron","text":"<ul> <li>Sub-millisecond latency requirements</li> <li>High message throughput needs (1M+ messages/sec)</li> <li>Reliable delivery without complex middleware</li> <li>Direct control over messaging infrastructure</li> </ul>"},{"location":"aeron/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"aeron/#publisher-subscriber-model","title":"Publisher-Subscriber Model","text":"<pre><code>Publisher \u2192 Aeron Transport \u2192 Multiple Subscribers\n</code></pre>"},{"location":"aeron/#request-response-pattern","title":"Request-Response Pattern","text":"<pre><code>Client \u2190\u2192 Aeron Transport \u2190\u2192 Server\n</code></pre>"},{"location":"aeron/#cluster-communication","title":"Cluster Communication","text":"<pre><code>Node A \u2190\u2192 Aeron Cluster \u2190\u2192 Node B, C, D\n</code></pre>"},{"location":"aeron/#related-topics","title":"Related Topics","text":"<ul> <li>System Design - Architecture patterns for distributed systems</li> <li>Java Threading - Concurrent programming for high-performance messaging</li> <li>KDB+ Integration - Database connectivity for real-time data processing</li> </ul>"},{"location":"aeron/#performance-considerations","title":"Performance Considerations","text":"<p>Aeron's design prioritizes mechanical sympathy - understanding and working with hardware characteristics for optimal performance. This includes CPU cache usage, memory allocation patterns, and network interface optimization.</p> <p>Production Deployment</p> <p>Aeron excels in production environments where predictable latency and high throughput are critical. Consider network topology, hardware specifications, and operating system tuning for optimal results.</p>"},{"location":"aeron/adv/","title":"Why aeron","text":"<p>Aeron is called a Layer 4 transport because it handles end-to-end message delivery, flow control, and reliability decisions \u2014 just like TCP/UDP. It's unique because it's designed from scratch for high-throughput, low-latency, and customizable transport logic, making it ideal for systems like trading engines, media streaming, and telemetry.</p>"},{"location":"aeron/adv/#layer-4-vs-layer-7-messaging-solutions","title":"Layer 4 vs Layer 7 Messaging Solutions","text":""},{"location":"aeron/adv/#layer-4-vs-layer-7-solutions","title":"Layer 4 vs Layer 7 Solutions","text":"Aspect Layer 4 (e.g., Aeron) Layer 7 (e.g., Kafka, gRPC) OSI Role Transport (reliability, flow, delivery) Application (business logic, formats, routing) Latency Ultra-low (~\u00b5s) Higher (~ms) Protocol Overhead Minimal (e.g., UDP + custom framing) High (TCP, TLS, HTTP, JSON, etc.) Memory Usage Lean (no serialization unless needed) High (serialization, buffering) Threading App-controlled, often lock-free Thread pools, GC pressure Flexibility Full control of transport behavior Fixed protocol stack (e.g., HTTP2 \u2192 gRPC) Reliability Optional, app-defined Built-in, protocol-controlled Back Pressure App-level, precise control Harder to tune, coarse-grained Examples Aeron, ZeroMQ (some modes), TCP, UDP Kafka, RabbitMQ, gRPC, HTTP"},{"location":"aeron/adv/#why-layer-4-aeron-is-much-faster","title":"Why Layer 4 (Aeron) is Much Faster","text":""},{"location":"aeron/adv/#1-fewer-layers-less-work","title":"1. Fewer Layers \u2192 Less Work","text":"<p>Layer 7 adds multiple processing stages: protocol parsing, authentication, routing, deserialization. Aeron stays close to the metal \u2014 minimal parsing, minimal system calls.</p>"},{"location":"aeron/adv/#2-no-tcp-overhead","title":"2. No TCP Overhead","text":"<p>TCP adds latency from: - Congestion control (slow start, retransmissions) - Head-of-line blocking - Connection setup (3-way handshake) - Stream-oriented framing</p> <p>Aeron uses UDP or shared memory and handles: - Framing - Retransmission (if needed) - Flow control All at the application level, giving much finer control and predictability.</p>"},{"location":"aeron/adv/#3-memory-and-cpu-optimized","title":"3. Memory and CPU Optimized","text":"<p>Aeron uses: - Off-heap memory - Lock-free ring buffers - Busy-spinning to eliminate context switching and GC pauses</p> <p>Layer 7 tools (e.g., Kafka, gRPC) often involve: - Heap allocations - Serialization (e.g., Protobuf, JSON) - GC pressure - Thread pool context switching</p>"},{"location":"aeron/adv/#4-deterministic-performance","title":"4. Deterministic Performance","text":"<p>Layer 4 solutions like Aeron are tuned for consistent latency, crucial in: - High-frequency trading - Video streaming - Gaming</p> <p>Layer 7 tools favor feature richness over raw speed.</p>"},{"location":"aeron/adv/#analogy","title":"Analogy","text":"<ul> <li>Layer 4 (Aeron) = Motorbike on an express lane: Fast, controlled, no traffic lights  </li> <li>Layer 7 (Kafka/gRPC) = Bus on city roads: More features (passengers, stops), but slower</li> </ul>"},{"location":"aeron/adv/#summary","title":"Summary","text":"Layer 4 (Aeron) Layer 7 (Kafka/gRPC) Transport-focused Feature-focused Raw speed, tight control Abstraction, rich features Ideal for low-latency trading, IPC Ideal for business logic, microservices"},{"location":"aeron/mdc-vs-unicast/","title":"Aeron MDC vs Unicast \u2013 Key Differences","text":"<p>When it comes to the UDP protocol, you can either use Unicast, which sends messages one to one, or multicast, which sends messages to many</p>"},{"location":"aeron/mdc-vs-unicast/#overview","title":"Overview","text":"<p>This guide compares Aeron's two main communication patterns for UDP-based messaging, helping you choose the right approach for your use case.</p>"},{"location":"aeron/mdc-vs-unicast/#comparison-table","title":"Comparison Table","text":"Feature Aeron Unicast Aeron MDC (Multi-Destination-Cast) Protocol UDP UDP Communication Type 1 Publisher \u2192 1 Subscriber 1 Publisher \u2192 N Subscribers Control Mode Not required <code>manual</code> or <code>dynamic</code> control mode required Subscriber Registration Static (hardcoded endpoints) Dynamic or manual registration of subscribers Publisher Setup Uses <code>endpoint=...</code> Uses <code>control-mode=dynamic</code> + <code>control=host:port</code> Subscriber Setup Uses <code>endpoint=...</code> Uses <code>endpoint=...|control=...|control-mode=dynamic</code> Multicast Needed? \u274c No \u274c No (achieves fanout via unicast) Dynamic Join/Leave \u274c No (fixed peer) \u2705 Yes (subscribers can join/leave dynamically) Number of Subscribers 1 only Multiple Efficiency Very efficient (1 send) Less efficient (N sends for N subscribers) Flexibility Low High Typical Use Case Point-to-point communication Broadcast-like use case, clusters, logs, market data"},{"location":"aeron/mdc-vs-unicast/#channel-configuration-examples","title":"Channel Configuration Examples","text":""},{"location":"aeron/mdc-vs-unicast/#unicast-channel","title":"Unicast Channel","text":"<pre><code>aeron:udp?endpoint=localhost:40123\n</code></pre>"},{"location":"aeron/mdc-vs-unicast/#mdc-publisher","title":"MDC (Publisher)","text":"<pre><code>aeron:udp?control-mode=dynamic|control=localhost:40123\n</code></pre>"},{"location":"aeron/mdc-vs-unicast/#mdc-subscriber","title":"MDC (Subscriber)","text":"<pre><code>aeron:udp?endpoint=localhost:40124|control-mode=dynamic|control=localhost:40123\n</code></pre>"},{"location":"aeron/mdc-vs-unicast/#key-points","title":"Key Points","text":"<p>MDC Implementation</p> <p>MDC uses unicast UDP under the hood, but gives multicast-like fan-out. This approach avoids the complexity of multicast infrastructure while providing broadcast capabilities.</p> <p>When to Use MDC</p> <ul> <li>Pub/sub patterns without relying on multicast infrastructure</li> <li>Aeron Cluster and high-availability systems</li> <li>Market data distribution scenarios</li> <li>Log replication across multiple nodes</li> </ul>"},{"location":"aeron/mdc-vs-unicast/#see-also","title":"See Also","text":"<ul> <li>Aeron Advantages - Why choose Aeron for messaging</li> <li>Coinbase Fix API Integration - Real-world Aeron implementation</li> </ul>"},{"location":"aeron/ring-buffer/","title":"Aeron Ring Buffer: Performance &amp; Threading","text":""},{"location":"aeron/ring-buffer/#overview","title":"Overview","text":"<p>The ring buffer is a fundamental data structure in Aeron that enables high-performance, lock-free communication between publishers and subscribers. Understanding its design, performance characteristics, and proper usage is critical for building low-latency messaging systems.</p>"},{"location":"aeron/ring-buffer/#what-is-a-ring-buffer","title":"What is a Ring Buffer?","text":"<p>A ring buffer (also called a circular buffer) is a fixed-size buffer that wraps around when it reaches the end. In Aeron, ring buffers are used to pass messages between threads with minimal contention and overhead.</p> <pre><code>graph LR\n    subgraph \"Ring Buffer (Fixed Size)\"\n        S0[Slot 0] --&gt; S1[Slot 1]\n        S1 --&gt; S2[Slot 2]\n        S2 --&gt; S3[Slot 3]\n        S3 --&gt; S4[Slot 4]\n        S4 --&gt; S5[Slot 5]\n        S5 --&gt; S6[Slot 6]\n        S6 --&gt; S7[Slot 7]\n        S7 -.wrap around.-&gt; S0\n    end\n\n    P[Producer] --&gt;|write| S2\n    C[Consumer] --&gt;|read| S5\n\n    style S2 fill:#c8e6c9\n    style S5 fill:#e3f2fd</code></pre>"},{"location":"aeron/ring-buffer/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Fixed Size: Pre-allocated at startup (must be power of 2)</li> <li>Circular: Wraps around when reaching the end</li> <li>Lock-Free: Uses atomic operations instead of locks</li> <li>Zero-Copy: Data written directly into the buffer</li> <li>Memory-Mapped: Can be shared between processes via shared memory</li> </ul>"},{"location":"aeron/ring-buffer/#why-ring-buffers-are-fast","title":"Why Ring Buffers are Fast","text":""},{"location":"aeron/ring-buffer/#1-pre-allocation","title":"1. Pre-Allocation","text":"<p>Traditional queues allocate memory dynamically, causing: - Garbage collection pressure - Cache misses - Unpredictable latency</p> <p>Ring buffers pre-allocate all memory at startup:</p> <pre><code>// Ring buffer created once at initialization\n// Size must be power of 2 (e.g., 1024, 2048, 4096)\nint bufferSize = 1024 * 1024;  // 1MB\nRingBuffer buffer = new ManyToOneRingBuffer(\n    new UnsafeBuffer(ByteBuffer.allocateDirect(bufferSize))\n);\n</code></pre> <p>Benefits: - No runtime allocation - Predictable memory usage - Cache-friendly sequential access</p>"},{"location":"aeron/ring-buffer/#2-lock-free-operations","title":"2. Lock-Free Operations","text":"<p>Instead of locks, Aeron uses Compare-And-Swap (CAS) operations:</p> <pre><code>// Pseudo-code of lock-free write\nlong claimSequence() {\n    long current = headSequence.get();\n    long next = current + messageLength;\n\n    // Atomic CAS - only one thread succeeds\n    if (headSequence.compareAndSet(current, next)) {\n        return current;  // Success!\n    }\n    // Retry if CAS failed (contention)\n}\n</code></pre> <p>Comparison:</p> Approach Contention Handling Performance Lock-based Block waiting threads Slow (context switches) Lock-free (CAS) Retry immediately Fast (no blocking)"},{"location":"aeron/ring-buffer/#3-cache-line-padding","title":"3. Cache-Line Padding","text":"<p>Aeron pads data structures to prevent false sharing:</p> <pre><code>// Without padding: Thread A and B share cache line\nclass Counter {\n    long valueA;  // CPU 1 writes here\n    long valueB;  // CPU 2 writes here \u2192 cache invalidation!\n}\n\n// With padding: Each thread gets own cache line\nclass PaddedCounter {\n    long p1, p2, p3, p4, p5, p6, p7;  // Padding\n    long valueA;                       // CPU 1's cache line\n    long p8, p9, p10, p11, p12, p13;  // Padding\n    long valueB;                       // CPU 2's cache line\n}\n</code></pre> <p>Why it matters: - Modern CPUs have 64-byte cache lines - If two threads write to the same cache line, the cache must be invalidated - Padding ensures each thread works on separate cache lines</p>"},{"location":"aeron/ring-buffer/#4-memory-barriers","title":"4. Memory Barriers","text":"<p>Aeron uses precise memory barriers instead of heavy locks:</p> <pre><code>// Producer writes data\nbuffer.putInt(offset, value);\nheadSequence.lazySet(nextSequence);  // Store barrier\n\n// Consumer reads data\nlong tail = tailSequence.get();      // Load barrier\nint value = buffer.getInt(offset);\n</code></pre> <p>Memory barriers ensure: - Writes are visible to other threads - Reads see the latest values - Much cheaper than locks</p>"},{"location":"aeron/ring-buffer/#multi-threading-benefits","title":"Multi-Threading Benefits","text":""},{"location":"aeron/ring-buffer/#many-to-one-ring-buffer","title":"Many-to-One Ring Buffer","text":"<p>Multiple producers can write simultaneously without coordination:</p> <pre><code>graph TB\n    P1[Producer 1] --&gt;|claim slot| RB[Ring Buffer]\n    P2[Producer 2] --&gt;|claim slot| RB\n    P3[Producer 3] --&gt;|claim slot| RB\n    P4[Producer N] --&gt;|claim slot| RB\n\n    RB --&gt;|sequential read| C[Single Consumer]\n\n    style RB fill:#f3e5f5\n    style C fill:#c8e6c9</code></pre> <p>Example: Trading System</p> <pre><code>// Multiple market data threads publishing to single ring buffer\nManyToOneRingBuffer buffer = new ManyToOneRingBuffer(...);\n\n// Producer 1: Price updates\nnew Thread(() -&gt; {\n    while (running) {\n        Price price = getPriceUpdate();\n        buffer.write(MSG_TYPE_PRICE, priceBuffer, 0, priceLength);\n    }\n}).start();\n\n// Producer 2: Order updates\nnew Thread(() -&gt; {\n    while (running) {\n        Order order = getOrderUpdate();\n        buffer.write(MSG_TYPE_ORDER, orderBuffer, 0, orderLength);\n    }\n}).start();\n\n// Producer 3: Trade updates\nnew Thread(() -&gt; {\n    while (running) {\n        Trade trade = getTradeUpdate();\n        buffer.write(MSG_TYPE_TRADE, tradeBuffer, 0, tradeLength);\n    }\n}).start();\n\n// Single consumer processes all messages in order\nbuffer.read((msgType, buffer, index, length) -&gt; {\n    switch (msgType) {\n        case MSG_TYPE_PRICE -&gt; processPrice(buffer, index, length);\n        case MSG_TYPE_ORDER -&gt; processOrder(buffer, index, length);\n        case MSG_TYPE_TRADE -&gt; processTrade(buffer, index, length);\n    }\n});\n</code></pre>"},{"location":"aeron/ring-buffer/#one-to-one-ring-buffer","title":"One-to-One Ring Buffer","text":"<p>For dedicated producer-consumer pairs, use the simpler OneToOneRingBuffer:</p> <pre><code>// Lower overhead for single producer scenario\nOneToOneRingBuffer buffer = new OneToOneRingBuffer(...);\n\n// Producer thread (only one)\nproducerThread.submit(() -&gt; {\n    buffer.write(msgType, data, 0, length);\n});\n\n// Consumer thread (only one)\nconsumerThread.submit(() -&gt; {\n    buffer.read(messageHandler);\n});\n</code></pre>"},{"location":"aeron/ring-buffer/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"aeron/ring-buffer/#throughput","title":"Throughput","text":"<p>Ring buffer throughput depends on:</p> <ol> <li>Buffer Size: Larger = more capacity before backpressure</li> <li>Message Size: Smaller messages = higher message rate</li> <li>Producer Count: More producers = more contention</li> <li>Consumer Speed: Slow consumer = backpressure</li> </ol> <p>Benchmark Results:</p> Configuration Throughput Latency (P99) 1 producer, small messages 50M msgs/sec 200ns 4 producers, small messages 25M msgs/sec 500ns 1 producer, large messages (1KB) 5M msgs/sec 1\u00b5s"},{"location":"aeron/ring-buffer/#latency","title":"Latency","text":"<p>Latency Distribution (Typical):</p> <pre><code>P50:   100 nanoseconds\nP90:   200 nanoseconds\nP99:   500 nanoseconds\nP99.9: 2 microseconds\nMax:   10 microseconds (with contention)\n</code></pre> <p>Factors affecting latency:</p> <ul> <li>CPU frequency: Higher = lower latency</li> <li>Cache misses: Keep working set small</li> <li>Contention: More producers = occasional CAS retry</li> <li>Consumer speed: Slow consumer causes backpressure</li> </ul>"},{"location":"aeron/ring-buffer/#memory-efficiency","title":"Memory Efficiency","text":"<pre><code>// Ring buffer memory usage calculation\nint bufferSize = 1024 * 1024;  // 1MB\nint overhead = 192;             // Header/metadata\n\nTotal memory = bufferSize + overhead \u2248 1MB\n</code></pre> <p>Key points: - Fixed memory usage (no growth) - No GC pressure (off-heap) - Memory can be shared between processes</p>"},{"location":"aeron/ring-buffer/#common-pitfalls-solutions","title":"Common Pitfalls &amp; Solutions","text":""},{"location":"aeron/ring-buffer/#problem-1-buffer-full-backpressure","title":"Problem 1: Buffer Full (Backpressure)","text":"<p>Symptom: <code>write()</code> returns <code>INSUFFICIENT_CAPACITY</code></p> <pre><code>// \u274c Wrong: Blocking write without handling backpressure\nbuffer.write(msgType, data, 0, length);  // May fail silently!\n\n// \u2705 Correct: Handle backpressure\nlong result;\nwhile ((result = buffer.write(msgType, data, 0, length)) &lt; 0) {\n    if (result == INSUFFICIENT_CAPACITY) {\n        // Options:\n        // 1. Drop message (if acceptable)\n        // 2. Wait and retry\n        // 3. Apply backpressure to upstream\n        Thread.onSpinWait();  // CPU-friendly spin\n    }\n}\n</code></pre> <p>Root causes: - Consumer too slow - Buffer too small - Message burst exceeds capacity</p> <p>Solutions: - Increase buffer size (power of 2) - Speed up consumer processing - Implement backpressure mechanism - Use multiple ring buffers</p>"},{"location":"aeron/ring-buffer/#problem-2-slow-consumer","title":"Problem 2: Slow Consumer","text":"<p>Symptom: Producer frequently hits backpressure</p> <pre><code>// \u274c Wrong: Slow consumer with heavy processing\nbuffer.read((msgType, buf, index, length) -&gt; {\n    // Blocking I/O in consumer!\n    database.save(parseMessage(buf, index, length));  // \u274c Too slow!\n});\n\n// \u2705 Correct: Fast consumer with async processing\nExecutorService workers = Executors.newFixedThreadPool(4);\n\nbuffer.read((msgType, buf, index, length) -&gt; {\n    // Copy data quickly\n    byte[] copy = new byte[length];\n    buf.getBytes(index, copy);\n\n    // Process asynchronously\n    workers.submit(() -&gt; {\n        database.save(parseMessage(copy));\n    });\n});\n</code></pre> <p>Best practices: - Keep consumer handler fast (&lt;100ns ideal) - Copy data and process async if needed - Batch database writes - Use multiple consumer threads (if order doesn't matter)</p>"},{"location":"aeron/ring-buffer/#problem-3-wrong-buffer-size","title":"Problem 3: Wrong Buffer Size","text":"<p>Symptom: Either wasted memory or frequent backpressure</p> <pre><code>// \u274c Wrong: Buffer too small for burst traffic\nint bufferSize = 1024;  // Only 1KB!\n\n// \u274c Wrong: Buffer unnecessarily large\nint bufferSize = 1024 * 1024 * 1024;  // 1GB wasted!\n\n// \u2705 Correct: Size based on burst capacity needed\nint messagesPerBurst = 10000;\nint avgMessageSize = 256;  // bytes\nint safetyMargin = 2;      // 2x for safety\n\nint bufferSize = nextPowerOf2(\n    messagesPerBurst * avgMessageSize * safetyMargin\n);  // e.g., 8MB\n</code></pre> <p>Sizing guidelines:</p> Use Case Recommended Size Low-latency IPC 1-4 MB Market data feed 8-32 MB High-throughput logging 32-128 MB Video streaming 128-512 MB"},{"location":"aeron/ring-buffer/#problem-4-false-sharing","title":"Problem 4: False Sharing","text":"<p>Symptom: Unexpected slowdown with multiple threads</p> <pre><code>// \u274c Wrong: Shared mutable state in handler\nclass Handler {\n    long counter = 0;  // Shared between threads!\n\n    void onMessage(MsgType type, Buffer buf, int index, int length) {\n        counter++;  // False sharing!\n    }\n}\n\n// \u2705 Correct: Thread-local counters\nclass Handler {\n    ThreadLocal&lt;Long&gt; counter = ThreadLocal.withInitial(() -&gt; 0L);\n\n    void onMessage(MsgType type, Buffer buf, int index, int length) {\n        counter.set(counter.get() + 1);  // Thread-local, no sharing\n    }\n}\n</code></pre>"},{"location":"aeron/ring-buffer/#problem-5-memory-leaks-shared-memory","title":"Problem 5: Memory Leaks (Shared Memory)","text":"<p>Symptom: Memory not released after process exit</p> <pre><code>// \u274c Wrong: No cleanup of memory-mapped buffer\nMappedByteBuffer buffer = createMappedBuffer(\"/dev/shm/aeron\");\n// Process crashes \u2192 memory leak!\n\n// \u2705 Correct: Cleanup on shutdown\nMappedByteBuffer buffer = createMappedBuffer(\"/dev/shm/aeron\");\n\nRuntime.getRuntime().addShutdownHook(new Thread(() -&gt; {\n    try {\n        // Unmap buffer\n        ((DirectBuffer) buffer).cleaner().clean();\n\n        // Delete shared memory file\n        Files.deleteIfExists(Path.of(\"/dev/shm/aeron\"));\n    } catch (Exception e) {\n        logger.error(\"Failed to cleanup shared memory\", e);\n    }\n}));\n</code></pre>"},{"location":"aeron/ring-buffer/#best-practices","title":"Best Practices","text":""},{"location":"aeron/ring-buffer/#1-choose-the-right-ring-buffer-type","title":"1. Choose the Right Ring Buffer Type","text":"Ring Buffer Type Use Case OneToOneRingBuffer Single producer, single consumer (lowest overhead) ManyToOneRingBuffer Multiple producers, single consumer (most common) Broadcast One producer, multiple consumers"},{"location":"aeron/ring-buffer/#2-size-appropriately","title":"2. Size Appropriately","text":"<pre><code>// Calculate based on expected burst size\nint expectedMsgRate = 1_000_000;  // 1M msgs/sec\nint burstDurationMs = 100;         // 100ms burst\nint avgMsgSize = 256;              // 256 bytes\n\nint requiredCapacity =\n    (expectedMsgRate / 1000) * burstDurationMs * avgMsgSize;\n\n// Round up to next power of 2\nint bufferSize = nextPowerOf2(requiredCapacity * 2);  // 2x safety\n</code></pre>"},{"location":"aeron/ring-buffer/#3-monitor-buffer-usage","title":"3. Monitor Buffer Usage","text":"<pre><code>// Check for backpressure\nlong result = buffer.write(msgType, data, 0, length);\nif (result &lt; 0) {\n    metrics.recordBackpressure();\n\n    if (result == INSUFFICIENT_CAPACITY) {\n        logger.warn(\"Ring buffer full! Consumer too slow or buffer too small\");\n    }\n}\n\n// Periodically check buffer utilization\nlong capacity = buffer.capacity();\nlong used = buffer.producerPosition() - buffer.consumerPosition();\ndouble utilization = (double) used / capacity * 100;\n\nif (utilization &gt; 80) {\n    logger.warn(\"Ring buffer {}% full - approaching backpressure\", utilization);\n}\n</code></pre>"},{"location":"aeron/ring-buffer/#4-keep-consumer-fast","title":"4. Keep Consumer Fast","text":"<pre><code>// DO: Fast consumer pattern\nbuffer.read((msgType, buf, index, length) -&gt; {\n    // 1. Parse message (fast)\n    long timestamp = buf.getLong(index);\n    int value = buf.getInt(index + 8);\n\n    // 2. Update in-memory state (fast)\n    cache.put(timestamp, value);\n\n    // 3. Don't do I/O here!\n});\n\n// DON'T: Slow consumer pattern\nbuffer.read((msgType, buf, index, length) -&gt; {\n    // \u274c Database write (slow)\n    database.insert(...);\n\n    // \u274c Network call (slow)\n    httpClient.post(...);\n\n    // \u274c File I/O (slow)\n    logger.info(\"Message: \" + parseMessage(buf));\n});\n</code></pre>"},{"location":"aeron/ring-buffer/#5-handle-backpressure-gracefully","title":"5. Handle Backpressure Gracefully","text":"<pre><code>// Strategy 1: Drop old messages (for non-critical data)\nif (buffer.write(msgType, data, 0, length) == INSUFFICIENT_CAPACITY) {\n    metrics.recordDroppedMessage();\n    // Continue without writing\n}\n\n// Strategy 2: Block and retry (for critical data)\nint retries = 0;\nwhile (buffer.write(msgType, data, 0, length) == INSUFFICIENT_CAPACITY) {\n    if (++retries &gt; MAX_RETRIES) {\n        throw new BackpressureException(\"Consumer cannot keep up\");\n    }\n    Thread.onSpinWait();  // CPU-friendly busy wait\n}\n\n// Strategy 3: Backpressure to upstream\nif (buffer.write(msgType, data, 0, length) == INSUFFICIENT_CAPACITY) {\n    upstream.pause();  // Stop accepting new data\n}\n</code></pre>"},{"location":"aeron/ring-buffer/#performance-tuning-checklist","title":"Performance Tuning Checklist","text":"<ul> <li>[ ] Buffer size is power of 2 and sized for expected burst</li> <li>[ ] Consumer is fast (&lt;1\u00b5s per message ideally)</li> <li>[ ] No I/O in consumer (use async processing)</li> <li>[ ] Monitor backpressure and alert when buffer &gt;80% full</li> <li>[ ] Use thread affinity to pin threads to CPU cores</li> <li>[ ] Disable CPU frequency scaling for consistent performance</li> <li>[ ] Use huge pages for large buffers (Linux: <code>vm.nr_hugepages</code>)</li> <li>[ ] Measure and profile actual latency distribution</li> </ul>"},{"location":"aeron/ring-buffer/#comparison-ring-buffer-vs-other-queues","title":"Comparison: Ring Buffer vs Other Queues","text":"Feature Aeron Ring Buffer ArrayBlockingQueue ConcurrentLinkedQueue Lock-free \u2705 Yes \u274c No (uses locks) \u2705 Yes Bounded \u2705 Yes \u2705 Yes \u274c No Pre-allocated \u2705 Yes \u2705 Yes \u274c No (dynamic) Zero-copy \u2705 Yes \u274c No \u274c No Shared memory \u2705 Yes \u274c No \u274c No Throughput 50M+ msgs/sec 5M msgs/sec 10M msgs/sec Latency (P99) &lt;1\u00b5s ~10\u00b5s ~5\u00b5s GC pressure None High Very high"},{"location":"aeron/ring-buffer/#real-world-example","title":"Real-World Example","text":""},{"location":"aeron/ring-buffer/#high-frequency-trading-feed-handler","title":"High-Frequency Trading Feed Handler","text":"<pre><code>public class MarketDataHandler {\n    private final ManyToOneRingBuffer buffer;\n    private final AtomicLong messagesProcessed = new AtomicLong();\n\n    public MarketDataHandler(int bufferSizeMB) {\n        int bufferSize = bufferSizeMB * 1024 * 1024;\n        this.buffer = new ManyToOneRingBuffer(\n            new UnsafeBuffer(ByteBuffer.allocateDirect(bufferSize))\n        );\n\n        // Consumer thread - pinned to CPU core\n        Thread consumer = new Thread(this::consumeMessages);\n        consumer.setName(\"market-data-consumer\");\n        // In production: pin to isolated CPU core\n        consumer.start();\n    }\n\n    // Called by multiple network threads\n    public void onMarketData(ByteBuffer data, int length) {\n        long result = buffer.write(\n            MSG_TYPE_MARKET_DATA,\n            new UnsafeBuffer(data),\n            0,\n            length\n        );\n\n        if (result &lt; 0) {\n            // Critical data - retry with exponential backoff\n            handleBackpressure();\n        }\n    }\n\n    private void consumeMessages() {\n        while (running) {\n            int messagesRead = buffer.read((msgType, buf, index, length) -&gt; {\n                // Fast parsing and processing\n                long timestamp = buf.getLong(index);\n                double price = buf.getDouble(index + 8);\n                long volume = buf.getLong(index + 16);\n\n                // Update in-memory order book (fast)\n                orderBook.update(price, volume, timestamp);\n\n                messagesProcessed.incrementAndGet();\n            });\n\n            if (messagesRead == 0) {\n                Thread.onSpinWait();  // No messages, spin briefly\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"aeron/ring-buffer/#summary","title":"Summary","text":"<p>Ring buffers are the foundation of Aeron's high performance:</p> <ul> <li>\u2705 Pre-allocated - No runtime allocation, no GC</li> <li>\u2705 Lock-free - Uses CAS for coordination</li> <li>\u2705 Cache-friendly - Padding prevents false sharing</li> <li>\u2705 Zero-copy - Direct memory access</li> <li>\u2705 Multi-threaded - Scales to many producers</li> </ul> <p>But require careful usage:</p> <ul> <li>\u26a0\ufe0f Fixed size - Must size for peak load</li> <li>\u26a0\ufe0f Backpressure - Handle buffer full scenarios</li> <li>\u26a0\ufe0f Fast consumer - Slow consumer causes backpressure</li> <li>\u26a0\ufe0f Power of 2 - Size must be 2^n</li> </ul>"},{"location":"aeron/ring-buffer/#further-reading","title":"Further Reading","text":"<ul> <li>Aeron Documentation</li> <li>LMAX Disruptor - Similar ring buffer design</li> <li>Mechanical Sympathy Blog - Performance engineering</li> <li>Aeron Why Page - Understanding Aeron's advantages</li> <li>MDC vs Unicast - Communication patterns</li> </ul>"},{"location":"aeron/artio/coinbase/","title":"Use case: coinbase fix api","text":""},{"location":"aeron/artio/coinbase/#info","title":"info","text":"<ol> <li> <p>Artio solution does not support SSL/TLS. use stunnel and haproxy</p> </li> <li> <p>use openssl to verify connection to Sandbox fix endpoint     <pre><code>openssl s_client -connect fix-ord.sandbox.exchange.coinbase.com:6121 -tls1_2\nopenssl s_client -connect fix-md.sandbox.exchange.coinbase.com:6121 -tls1_2\n</code></pre></p> </li> </ol>"},{"location":"ai-tools/","title":"AI Tools","text":"<p>Welcome to the AI section. This page collects tips, examples and session notes about using AI tools and workflows.</p> <ul> <li>Claude Tips</li> <li>Claude Code Sessions</li> <li>Common AI Knowledge</li> </ul> <p>If you'd like other AI pages added here, tell me what content or links to include.</p>"},{"location":"ai-tools/claude-code-sessions/","title":"Claude Code Session Management","text":"<p>Understanding how Claude Code handles project knowledge, session context, and continuity across multiple working sessions.</p>"},{"location":"ai-tools/claude-code-sessions/#how-claude-code-sessions-work","title":"How Claude Code Sessions Work","text":""},{"location":"ai-tools/claude-code-sessions/#session-context-basics","title":"Session Context Basics","text":"<p>Claude Code operates with stateful sessions that have context limits:</p> <ul> <li>Context Window: 200,000 tokens per session</li> <li>Memory Scope: Each session starts fresh - no memory of previous conversations</li> <li>Context Usage: Conversation history, file reads, and tool calls consume tokens</li> <li>Session End: When context fills up or user closes Claude Code</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#context-consumption-breakdown","title":"Context Consumption Breakdown","text":"Component Typical Usage Description Messages 60-70% Conversation history and responses System Tools 5-10% Claude Code's built-in functionality System Prompt 1-3% Base Claude Code configuration MCP Tools &lt;1% IDE integration tools Free Space 20-30% Available for continued work"},{"location":"ai-tools/claude-code-sessions/#session-knowledge-preservation-strategy","title":"Session Knowledge Preservation Strategy","text":""},{"location":"ai-tools/claude-code-sessions/#the-challenge-fresh-sessions","title":"The Challenge: Fresh Sessions","text":"<p>Problem: Each new Claude Code session starts with zero knowledge of: - Previous conversations and decisions - Work completed in earlier sessions - Project context and technical choices - User preferences and workflow patterns</p> <p>Solution: Documentation as Session Memory</p>"},{"location":"ai-tools/claude-code-sessions/#project-knowledge-system","title":"Project Knowledge System","text":""},{"location":"ai-tools/claude-code-sessions/#private-project-files-claude-folder","title":"Private Project Files (<code>.claude/</code> folder)","text":"<pre><code>.claude/\n\u251c\u2500\u2500 CLAUDE.md              # Project overview &amp; quick reference\n\u251c\u2500\u2500 feature-tracking.md    # Complete change history\n\u251c\u2500\u2500 security-workflow.md   # Security procedures &amp; standards  \n\u251c\u2500\u2500 telegram-setup.md      # Automation configuration\n\u2514\u2500\u2500 session-[date].md      # Detailed session summaries\n</code></pre>"},{"location":"ai-tools/claude-code-sessions/#public-documentation","title":"Public Documentation","text":"<pre><code>docs/ai-tools/\n\u251c\u2500\u2500 tips.md                    # Claude usage best practices\n\u2514\u2500\u2500 claude-code-sessions.md    # This page - session management guide\n</code></pre>"},{"location":"ai-tools/claude-code-sessions/#new-session-startup-process","title":"New Session Startup Process","text":""},{"location":"ai-tools/claude-code-sessions/#efficient-context-rebuild-2-4-minutes","title":"Efficient Context Rebuild (2-4 minutes)","text":"<ol> <li> <p>Quick Project Overview <pre><code># Claude reads: docs/.claude/CLAUDE.md\n# Gets: Project purpose, key commands, file structure\n</code></pre></p> </li> <li> <p>Recent Changes Review <pre><code># Claude reads: docs/.claude/feature-tracking.md  \n# Gets: What was changed, why, and current status\n</code></pre></p> </li> <li> <p>Detailed Session History <pre><code># Claude reads: docs/.claude/session-[latest-date].md\n# Gets: Technical decisions, user preferences, challenges solved\n</code></pre></p> </li> <li> <p>Current State Check <pre><code># Claude runs: git log --oneline -10\n# Gets: Recent commits and project evolution\n</code></pre></p> </li> </ol>"},{"location":"ai-tools/claude-code-sessions/#result-full-project-context-in-minutes-not-hours","title":"Result: Full project context in minutes, not hours","text":""},{"location":"ai-tools/claude-code-sessions/#session-management-best-practices","title":"Session Management Best Practices","text":""},{"location":"ai-tools/claude-code-sessions/#during-active-sessions","title":"During Active Sessions","text":""},{"location":"ai-tools/claude-code-sessions/#monitor-context-usage","title":"Monitor Context Usage","text":"<pre><code># Check context usage with:\n/context\n</code></pre> <p>Recommended Actions by Usage Level: - &lt;50%: Continue working normally - 50-70%: Good productivity zone - 70-85%: Consider wrapping up major tasks - &gt;85%: Plan session end or start new session</p>"},{"location":"ai-tools/claude-code-sessions/#document-as-you-go","title":"Document as You Go","text":"<ul> <li>Major decisions: Add to feature-tracking.md</li> <li>New procedures: Update relevant documentation</li> <li>User preferences: Note for future sessions</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#session-end-procedures","title":"Session End Procedures","text":""},{"location":"ai-tools/claude-code-sessions/#before-closing-claude-code","title":"Before Closing Claude Code","text":"<ol> <li>Complete Current Task: Finish in-progress work</li> <li>Update Documentation: Record any new insights</li> <li>Commit Changes: Ensure all work is saved in git</li> <li>Session Summary: Create session-[date].md if significant work done</li> </ol>"},{"location":"ai-tools/claude-code-sessions/#clean-session-endings","title":"Clean Session Endings","text":"<ul> <li>Natural breakpoints: End of major features or milestones</li> <li>All work committed: Nothing left uncommitted in git</li> <li>Documentation updated: Changes recorded for next session</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#context-optimization-techniques","title":"Context Optimization Techniques","text":""},{"location":"ai-tools/claude-code-sessions/#efficient-tool-usage","title":"Efficient Tool Usage","text":"<ul> <li>Batch operations: Read multiple files in single request when possible</li> <li>Targeted searches: Use specific grep patterns vs broad searches  </li> <li>Focused edits: Make precise changes vs large rewrites</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#smart-documentation-strategy","title":"Smart Documentation Strategy","text":"<ul> <li>Write decisions down: Don't rely on session memory</li> <li>Create templates: Reusable patterns for future work</li> <li>Link related work: Cross-reference between project areas</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#real-world-session-example","title":"Real-World Session Example","text":""},{"location":"ai-tools/claude-code-sessions/#session-overview-documentation-overhaul","title":"Session Overview: Documentation Overhaul","text":"<ul> <li>Start Context: 2.9k tokens (system prompt only)</li> <li>Work Completed: 5 major commits, 16+ files changed</li> <li>End Context: 143k/200k tokens (71% usage)</li> <li>Duration: Extended productive session</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#major-accomplishments","title":"Major Accomplishments","text":"<ol> <li>Documentation readability overhaul - Main page rewrite, navigation fixes</li> <li>Security workflow implementation - Mandatory scanning procedures</li> <li>Telegram bot automation - GitHub Actions integration</li> <li>Content organization - Professional structure throughout</li> </ol>"},{"location":"ai-tools/claude-code-sessions/#session-end-strategy","title":"Session End Strategy","text":"<ul> <li>Comprehensive documentation: Created session-2023-08-23.md with complete context</li> <li>Updated tracking: Added all changes to feature-tracking.md</li> <li>Clean git state: All work committed and pushed</li> <li>Future readiness: Next session can resume in 3-5 minutes</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#advanced-session-continuity","title":"Advanced Session Continuity","text":""},{"location":"ai-tools/claude-code-sessions/#multi-day-project-strategies","title":"Multi-Day Project Strategies","text":""},{"location":"ai-tools/claude-code-sessions/#daily-session-patterns","title":"Daily Session Patterns","text":"<ul> <li>Morning startup: 3-5 minutes reading project context</li> <li>Focused work: Tackle 1-2 major tasks per session</li> <li>End-of-day wrap: Update documentation, clean commits</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#weekly-reviews","title":"Weekly Reviews","text":"<ul> <li>Progress assessment: Review feature-tracking.md</li> <li>Documentation cleanup: Consolidate session notes</li> <li>Workflow refinements: Update procedures based on experience</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#long-term-project-evolution","title":"Long-Term Project Evolution","text":""},{"location":"ai-tools/claude-code-sessions/#session-documentation-archive","title":"Session Documentation Archive","text":"<pre><code>.claude/\n\u251c\u2500\u2500 session-2023-08-23.md    # Documentation overhaul\n\u251c\u2500\u2500 session-2023-08-30.md    # Feature additions\n\u251c\u2500\u2500 session-2023-09-06.md    # Performance improvements\n\u2514\u2500\u2500 session-archive/         # Older sessions\n</code></pre>"},{"location":"ai-tools/claude-code-sessions/#knowledge-base-growth","title":"Knowledge Base Growth","text":"<ul> <li>Pattern recognition: Common tasks become templates</li> <li>Procedure refinement: Workflows improve over time</li> <li>Context efficiency: Better at preserving important information</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#benefits-of-this-approach","title":"Benefits of This Approach","text":""},{"location":"ai-tools/claude-code-sessions/#for-users","title":"For Users","text":"<ul> <li>\u2705 Consistent experience: Each session picks up where previous left off</li> <li>\u2705 No repeated explanations: Context rebuilds automatically</li> <li>\u2705 Project history: Complete record of decisions and changes</li> <li>\u2705 Knowledge preservation: Nothing gets lost between sessions</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#for-projects","title":"For Projects","text":"<ul> <li>\u2705 Better documentation: Forced to document decisions clearly  </li> <li>\u2705 Improved workflows: Procedures get refined over time</li> <li>\u2705 Team collaboration: Others can understand project evolution</li> <li>\u2705 Maintainable complexity: Large projects stay manageable</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#for-development","title":"For Development","text":"<ul> <li>\u2705 Security consistency: Procedures followed across all sessions</li> <li>\u2705 Quality maintenance: Standards preserved over time</li> <li>\u2705 Efficient scaling: Can handle growing project complexity</li> <li>\u2705 Knowledge transfer: Easy onboarding for new team members</li> </ul>"},{"location":"ai-tools/claude-code-sessions/#conclusion","title":"Conclusion","text":"<p>Claude Code's session-based approach, combined with strategic documentation, creates a powerful system for maintaining project continuity. The key insight is treating documentation as external memory - what gets written down persists across sessions, while what stays in conversation memory disappears.</p> <p>This approach transforms the apparent limitation of fresh sessions into a strength: it forces good documentation practices that benefit both AI assistance and human collaboration.</p> <p>Session Management Success</p> <p>The best Claude Code sessions end with comprehensive documentation that makes the next session start as if the conversation never stopped.</p>"},{"location":"ai-tools/common/","title":"Common AI Knowledge","text":"<p>This page collects short reference notes about common AI concepts used in this site.</p>"},{"location":"ai-tools/common/#prompt","title":"Prompt","text":"<p>Prompt engineering notes and patterns:</p> <ul> <li>Prompt = input + instructions + context.</li> <li>Keep context concise and structured.</li> <li>Use system and assistant roles when supported.</li> </ul> <p>Examples and templates:</p> <ul> <li>Template 1: \"You are an expert X. Given the following input: {{input}}. Respond with...\"</li> <li>Template 2: Short few-shot examples.</li> </ul>"},{"location":"ai-tools/common/#agent","title":"Agent","text":"<p>A short definition:</p> <ul> <li>Agent: an autonomous system that perceives its environment, makes decisions, and acts to achieve goals. In AI, agents may be simple rule-based programs, reinforcement learning agents, or orchestration layers that call models and tools.</li> </ul>"},{"location":"ai-tools/common/#mcp","title":"MCP","text":"<ul> <li>MCP: Model Context Protocol (or \"Model Control Plane\" depending on context). Use this section to list what MCP means for you \u2014 orchestration, connectors, observability, and dataflow.</li> </ul> <p>Example:</p> <ul> <li>Purpose: coordinate multiple models, maintain context, routing and plugin/tool control.</li> </ul> <p>Combined overview of prompts, MCP and agents.</p> Figure 1: Server architecture overview"},{"location":"ai-tools/tips/","title":"Claude Tips and Best Practices","text":"<p>A collection of tips, tricks, and best practices for working with Claude AI.</p>"},{"location":"ai-tools/tips/#general-usage-tips","title":"General Usage Tips","text":""},{"location":"ai-tools/tips/#1-be-clear-and-specific","title":"1. Be Clear and Specific","text":"<ul> <li>Provide detailed context when asking questions</li> <li>Use specific examples to illustrate what you need</li> <li>Break complex requests into smaller, manageable parts</li> </ul>"},{"location":"ai-tools/tips/#2-use-structured-prompts","title":"2. Use Structured Prompts","text":"<pre><code>Task: [What you want to accomplish]\nContext: [Background information]\nRequirements: [Specific needs or constraints]\nOutput: [Desired format or structure]\n</code></pre>"},{"location":"ai-tools/tips/#3-iterative-refinement","title":"3. Iterative Refinement","text":"<ul> <li>Start with a basic request and refine based on results</li> <li>Ask follow-up questions to improve outputs</li> <li>Provide feedback on what works and what doesn't</li> </ul>"},{"location":"ai-tools/tips/#code-related-tips","title":"Code-Related Tips","text":""},{"location":"ai-tools/tips/#1-provide-context","title":"1. Provide Context","text":"<ul> <li>Share relevant file structure</li> <li>Include existing code snippets</li> <li>Mention the programming language and framework</li> </ul>"},{"location":"ai-tools/tips/#2-ask-for-explanations","title":"2. Ask for Explanations","text":"<pre><code>- Explain the logic behind the solution\n- Add comments for complex parts\n- Suggest alternative approaches\n</code></pre>"},{"location":"ai-tools/tips/#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Share complete error messages</li> <li>Provide the code that's causing issues</li> <li>Ask for debugging strategies</li> </ul>"},{"location":"ai-tools/tips/#documentation-tips","title":"Documentation Tips","text":""},{"location":"ai-tools/tips/#1-structure-requests","title":"1. Structure Requests","text":"<ul> <li>Request specific formatting (Markdown, bullet points, etc.)</li> <li>Ask for examples and code snippets</li> <li>Specify target audience level</li> </ul>"},{"location":"ai-tools/tips/#2-content-organization","title":"2. Content Organization","text":"<ul> <li>Ask for logical flow and organization</li> <li>Request table of contents for longer documents</li> <li>Ask for cross-references between related topics</li> </ul>"},{"location":"ai-tools/tips/#productivity-hacks","title":"Productivity Hacks","text":""},{"location":"ai-tools/tips/#1-template-creation","title":"1. Template Creation","text":"<p>Ask Claude to create templates for: - Project documentation - Code review checklists - Meeting notes - README files</p>"},{"location":"ai-tools/tips/#2-batch-processing","title":"2. Batch Processing","text":"<ul> <li>Process multiple similar tasks at once</li> <li>Create standardized formats for repeated work</li> <li>Use consistent naming conventions</li> </ul>"},{"location":"ai-tools/tips/#3-learning-acceleration","title":"3. Learning Acceleration","text":"<ul> <li>Ask for explanations at different complexity levels</li> <li>Request practice exercises</li> <li>Get recommendations for further learning</li> </ul>"},{"location":"ai-tools/tips/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"ai-tools/tips/#1-role-based-prompting","title":"1. Role-Based Prompting","text":"<pre><code>\"Act as a senior software architect reviewing this design...\"\n\"As a technical writer, help me improve this documentation...\"\n\"From a security expert's perspective, analyze this code...\"\n</code></pre>"},{"location":"ai-tools/tips/#2-constraint-based-problem-solving","title":"2. Constraint-Based Problem Solving","text":"<ul> <li>Specify limitations (time, resources, technology)</li> <li>Ask for trade-off analysis</li> <li>Request multiple solution approaches</li> </ul>"},{"location":"ai-tools/tips/#3-chain-of-thought","title":"3. Chain of Thought","text":"<ul> <li>Ask Claude to \"think step by step\"</li> <li>Add \"think hard\" to get more thorough responses</li> <li>Request reasoning behind recommendations</li> <li>Ask for pros and cons of different approaches</li> </ul> <p>YouTube Pro Tip</p> <p>Adding \"think hard\" to your prompts makes Claude provide more detailed, thorough analysis and better reasoning.</p>"},{"location":"ai-tools/tips/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<p>Watch Out For</p> <ul> <li>Assuming Claude knows your specific context without explanation</li> <li>Not providing enough examples for complex tasks</li> <li>Asking too many unrelated questions in one prompt</li> </ul> <p>Best Practices</p> <ul> <li>Always verify code before using in production</li> <li>Cross-reference important information</li> <li>Use Claude as a starting point, not the final answer</li> </ul>"},{"location":"ai-tools/tips/#integration-with-development-workflow","title":"Integration with Development Workflow","text":""},{"location":"ai-tools/tips/#1-code-reviews","title":"1. Code Reviews","text":"<ul> <li>Paste code snippets for review</li> <li>Ask for security considerations</li> <li>Request performance optimization suggestions</li> </ul>"},{"location":"ai-tools/tips/#2-documentation-writing","title":"2. Documentation Writing","text":"<ul> <li>Generate API documentation</li> <li>Create user guides</li> <li>Write technical specifications</li> </ul>"},{"location":"ai-tools/tips/#3-problem-solving","title":"3. Problem Solving","text":"<ul> <li>Debug complex issues</li> <li>Design system architecture</li> <li>Optimize existing solutions</li> </ul>"},{"location":"ai-tools/tips/#useful-prompt-patterns","title":"Useful Prompt Patterns","text":""},{"location":"ai-tools/tips/#for-code-generation","title":"For Code Generation","text":"<pre><code>Create a [language] function that:\n- Does [specific task]\n- Takes [parameters]\n- Returns [expected output]\n- Handles [error cases]\n</code></pre>"},{"location":"ai-tools/tips/#for-explanations","title":"For Explanations","text":"<pre><code>Explain [concept] as if I'm:\n- A beginner programmer\n- An experienced developer\n- Someone from a non-technical background\n</code></pre>"},{"location":"ai-tools/tips/#for-analysis","title":"For Analysis","text":"<pre><code>Analyze this [code/design/approach] for:\n- Performance implications\n- Security vulnerabilities  \n- Best practice adherence\n- Potential improvements\n</code></pre>"},{"location":"ai-tools/tips/#resources-and-references","title":"Resources and References","text":"<ul> <li>Claude Documentation</li> <li>Prompt Engineering Guide</li> <li>Best Practices for AI Coding Assistants</li> </ul>"},{"location":"blog/","title":"Welcome to blog","text":""},{"location":"blog/one-url/","title":"Open <code>https://www.google.com</code> in Chrome","text":"<p>Opening a URL like <code>https://www.google.com</code> feels effortless, but under the hood, the browser performs a complex series of operations involving DNS, TCP, TLS, and HTTP. This guide walks through each step \u2014 and how to inspect them using terminal.</p>"},{"location":"blog/one-url/#full-workflow-when-opening-a-url","title":"Full Workflow When Opening a URL","text":"<p>Steps performed by the browser:</p> <ol> <li>URL parsing</li> <li>DNS resolution \u2013 Resolves <code>www.google.com</code> to an IP address.</li> <li>TCP connection \u2013 Connects to port 443 (HTTPS).</li> <li>TLS handshake \u2013 Establishes a secure session.</li> <li>HTTP GET request \u2013 Requests content from the server.</li> <li>HTTP response \u2013 Receives data.</li> <li>Rendering \u2013 Renders HTML/CSS/JS content.</li> </ol>"},{"location":"blog/one-url/#inspecting-each-step-in-terminal","title":"Inspecting Each Step in Terminal","text":"<p>This guide uses <code>www.google.com</code> in all examples.</p>"},{"location":"blog/one-url/#1-dns-resolution-via-dig","title":"1. DNS Resolution via dig","text":"<p>Command: <pre><code>dig www.google.com\n</code></pre> The resolved IP address(es) of www.google.com <pre><code>;; QUESTION SECTION:\n;www.google.com.            IN  A\n\n;; ANSWER SECTION:\nwww.google.com.     87  IN  A   142.250.4.105\nwww.google.com.     87  IN  A   142.250.4.99\n</code></pre></p> <pre><code>| Field             | Meaning                                                                |\n| ----------------- | ---------------------------------------------------------------------- |\n| `www.google.com.` | The domain I queried                                                 |\n| `87`              | TTL (Time To Live) in seconds \u2014 how long this record can be cached |\n| `IN`              | Class of record \u2014 \"IN\": \"Internet\"                           |\n| `A`               | Record type \u2014 \"A\": IPv4 address                                   |\n| `142.250.4.105`   | One of the **IPv4 addresses** for `www.google.com`                     |\n</code></pre> <ol> <li>Why Are There Multiple IPs? (DNS load balancing or round-robin DNS)<ol> <li>Google has many servers worldwide to handle billions of requests.</li> <li>When I access www.google.com, my system picks one IP from this list (often the closest one).</li> <li>This improves availability, speed, and redundancy.</li> </ol> </li> <li>TTL 87<ol> <li>my system or browser can cache this DNS response for 87 seconds.</li> <li>After that, it must ask the DNS server again (could get different IPs next time).</li> </ol> </li> </ol>"},{"location":"blog/one-url/#2-dns-tcp-tls-http-via-curl","title":"2. DNS + TCP + TLS + HTTP via curl","text":"<p><pre><code>curl -v https://www.google.com\n</code></pre> show: DNS lookup, TCP connection attempt, TLS handshake, HTTP request/response</p> <pre><code>* Host www.google.com:443 was resolved.\n* IPv6: (none)\n* IPv4: 142.250.4.103, 142.250.4.147, 142.250.4.106, 142.250.4.104, 142.250.4.99, 142.250.4.105\n*   Trying 142.250.4.103:443...\n* Connected to www.google.com (142.250.4.103) port 443\n* ALPN: curl offers h2,http/1.1\n* (304) (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/cert.pem\n*  CApath: none\n* (304) (IN), TLS handshake, Server hello (2):\n* (304) (IN), TLS handshake, Unknown (8):\n* (304) (IN), TLS handshake, Certificate (11):\n* (304) (IN), TLS handshake, CERT verify (15):\n* (304) (IN), TLS handshake, Finished (20):\n* (304) (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256 / [blank] / UNDEF\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=www.google.com\n*  start date: May 12 08:44:44 2025 GMT\n*  expire date: Aug  4 08:44:43 2025 GMT\n*  subjectAltName: host \"www.google.com\" matched cert's \"www.google.com\"\n*  issuer: C=US; O=Google Trust Services; CN=WR2\n*  SSL certificate verify ok.\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://www.google.com/\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: www.google.com]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.7.1]\n* [HTTP/2] [1] [accept: */*]\n&gt; GET / HTTP/2\n&gt; Host: www.google.com\n&gt; User-Agent: curl/8.7.1\n&gt; Accept: */*\n</code></pre> Step What Happened DNS Resolution Found multiple IPs, used <code>142.250.4.103</code> TCP Connection Connected to IP:443 TLS Handshake TLS 1.3 used; cipher <code>CHACHA20-POLY1305</code> negotiated Certificate Check Issued by Google Trust; matched domain; verified successfully Protocol Negotiation Chose HTTP/2 via ALPN HTTP Request Sent <code>GET /</code> with headers over a secure HTTP/2 channel <p><code>CAfile: /etc/ssl/cert.pem</code>:     This line tells me where curl is looking for trusted Certificate Authorities (CAs) to verify the HTTPS server's certificate. This file is a bundle of trusted root certificates, pre-installed by my operating system (usually   macOS or Linux). It allows curl (or any SSL/TLS library like OpenSSL or SecureTransport) to say: <code>Do I trust the  certificate from www.google.com? Let me check if it's signed by someone I trust (e.g., Google Trust Services</code></p> Item Explanation <code>CAfile:</code> Path to the file containing trusted Certificate Authorities (CAs) Used For Verifying if a server's HTTPS certificate is valid and trusted File Example <code>/etc/ssl/cert.pem</code> (can vary by OS \u2014 e.g., <code>/etc/pki/ca-trust/extracted/</code> on some distros) Related Option I can override with <code>curl --cacert /path/to/custom.pem</code> <p><code>* (304) (IN), TLS handshake, Unknown (8)</code>: </p> Output Meaning <code>TLS handshake, Unknown (8):</code> TLS 1.3 server sent an Encrypted Extensions message Why it's \u201cUnknown\u201d <code>curl -v</code> just doesn\u2019t label it clearly (not a bug, just cosmetic) Is this bad? \u274c No \u2014 it's part of every proper TLS 1.3 connection"},{"location":"blog/one-url/#3-view-tls-details-via-openssl","title":"3. View TLS Details via openssl","text":"<pre><code>(TLS version, certs, ciphers): `openssl s_client -connect example.com:443`\n</code></pre>"},{"location":"blog/one-url/#4-availability-via-curl","title":"4. Availability via curl","text":"<p>Checking if the server is reachable and what headers it returns: <code>curl -I https://example.com</code></p> <p>Debugging the full connection including DNS, TCP, TLS, and HTTP request/response: <code>curl -v https://www.google.com</code></p>"},{"location":"disruptor/","title":"LMAX Disruptor &amp; Conduit Framework","text":""},{"location":"disruptor/#overview","title":"Overview","text":"<p>The LMAX Disruptor is a high-performance inter-thread messaging library that provides a simple yet powerful framework for exchanging data between threads. It is designed for low-latency, high-throughput scenarios where traditional queuing mechanisms introduce too much overhead.</p> <p>The Conduit framework builds on top of the LMAX Disruptor to provide a reactive, event-driven architecture for building complex data processing pipelines.</p>"},{"location":"disruptor/#what-is-the-lmax-disruptor","title":"What is the LMAX Disruptor?","text":"<p>The LMAX Disruptor is a library that enables very high performance concurrent programming. It was developed by LMAX Exchange, a financial trading platform that required extremely low-latency message passing between threads.</p>"},{"location":"disruptor/#key-features","title":"Key Features","text":"<ul> <li>Lock-free: Uses CAS (Compare-And-Swap) operations instead of locks</li> <li>Ring Buffer: Pre-allocated circular buffer eliminates garbage collection overhead</li> <li>Memory Barriers: Carefully controlled memory visibility without locks</li> <li>Cache-friendly: Data structures designed to minimize cache line contention</li> <li>Batching: Naturally supports batch processing of events</li> </ul>"},{"location":"disruptor/#core-concepts","title":"Core Concepts","text":""},{"location":"disruptor/#ring-buffer","title":"Ring Buffer","text":"<p>A fixed-size circular buffer that holds references to events. It's pre-allocated at startup, which eliminates memory allocation during runtime.</p> <pre><code>graph LR\n    A[Producer] --&gt; B[Ring Buffer]\n    B --&gt; C[Consumer]\n    style B fill:#f9f,stroke:#333,stroke-width:2px</code></pre>"},{"location":"disruptor/#sequence-numbers","title":"Sequence Numbers","text":"<p>Used to track positions in the ring buffer. Producers claim sequence numbers before writing, and consumers track which events they've processed.</p>"},{"location":"disruptor/#wait-strategies","title":"Wait Strategies","text":"<p>Different strategies for consumers waiting for new events:</p> <ul> <li>BusySpinWaitStrategy: Lowest latency, highest CPU usage</li> <li>YieldingWaitStrategy: Low latency with some CPU yield</li> <li>SleepingWaitStrategy: Lower CPU usage, higher latency</li> <li>BlockingWaitStrategy: Lowest CPU usage, highest latency</li> </ul>"},{"location":"disruptor/#why-use-disruptor","title":"Why Use Disruptor?","text":""},{"location":"disruptor/#traditional-queue-problems","title":"Traditional Queue Problems","text":"<p>Traditional concurrent queues (like <code>java.util.concurrent</code> queues) suffer from:</p> <ol> <li>Lock Contention: Multiple threads competing for locks</li> <li>Cache Coherency: False sharing and cache line bouncing</li> <li>Memory Allocation: Creating/destroying objects causes GC pressure</li> <li>Context Switching: Blocking operations cause thread context switches</li> </ol>"},{"location":"disruptor/#disruptor-solutions","title":"Disruptor Solutions","text":"Problem Disruptor Solution Lock Contention Lock-free algorithms using CAS Cache Coherency Cache line padding to prevent false sharing Memory Allocation Pre-allocated ring buffer Context Switching Busy-spin wait strategies"},{"location":"disruptor/#performance-characteristics","title":"Performance Characteristics","text":"<p>The Disruptor can process millions of events per second with nanosecond latencies on modern hardware.</p>"},{"location":"disruptor/#benchmark-comparison","title":"Benchmark Comparison","text":"<pre><code>graph TB\n    subgraph \"Throughput (ops/sec)\"\n        A[Disruptor: 25M]\n        B[ArrayBlockingQueue: 5M]\n        C[LinkedBlockingQueue: 3M]\n    end</code></pre>"},{"location":"disruptor/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Financial Trading Systems: Ultra-low latency order processing</li> <li>Real-time Analytics: High-throughput data stream processing</li> <li>Event Sourcing: Recording domain events in order</li> <li>Log Aggregation: Collecting and processing log entries</li> <li>IoT Data Processing: Handling sensor data streams</li> </ol>"},{"location":"disruptor/#getting-started","title":"Getting Started","text":"<p>To use the Disruptor in your project, add the dependency:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lmax&lt;/groupId&gt;\n    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;\n    &lt;version&gt;4.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"disruptor/#next-steps","title":"Next Steps","text":"<ul> <li>Conduit Framework Overview - Learn about the reactive framework built on Disruptor</li> <li>Performance Comparison - Detailed performance analysis</li> <li>Example Applications - Real-world usage examples</li> </ul>"},{"location":"disruptor/#resources","title":"Resources","text":"<ul> <li>LMAX Disruptor GitHub</li> <li>Technical Paper</li> <li>Martin Fowler's Article</li> </ul>"},{"location":"disruptor/conduit-framework/","title":"Conduit - Reactive Dispatcher Framework","text":""},{"location":"disruptor/conduit-framework/#overview","title":"Overview","text":"<p>Conduit is a high-performance, low-latency reactive framework built on top of the LMAX Disruptor. It provides a type-safe, fluent API for building event-driven data processing pipelines that can handle multiple input sources with different data types.</p>"},{"location":"disruptor/conduit-framework/#architecture","title":"Architecture","text":""},{"location":"disruptor/conduit-framework/#core-components","title":"Core Components","text":""},{"location":"disruptor/conduit-framework/#1-dispatcher","title":"1. Dispatcher","text":"<p>The <code>Dispatcher</code> interface is responsible for dispatching events to registered listeners.</p> <pre><code>public interface Dispatcher&lt;T&gt; {\n    void dispatch(T event);\n    void register(Listener&lt;T&gt; listener);\n    void unregister(Listener&lt;T&gt; listener);\n    void clear();\n}\n</code></pre> <p>EventDispatcher Implementation:</p> <pre><code>EventDispatcher&lt;Integer&gt; intDispatcher = EventDispatcher.create();\nEventDispatcher&lt;String&gt; stringDispatcher = EventDispatcher.create();\n</code></pre>"},{"location":"disruptor/conduit-framework/#2-node","title":"2. Node","text":"<p>Nodes are processing components that subscribe to one or more dispatchers and handle events through callback methods.</p> <p>Node Types:</p> <ul> <li><code>Node1</code> to <code>Node9</code> - Plain implementations (multi-threaded event handling)</li> <li><code>DisruptorNode1</code> to <code>DisruptorNode9</code> - Disruptor-based implementations (single-threaded, lock-free)</li> </ul>"},{"location":"disruptor/conduit-framework/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TB\n    A[Data Source 1&lt;br/&gt;Type A] --&gt; D1[Dispatcher A]\n    B[Data Source 2&lt;br/&gt;Type B] --&gt; D2[Dispatcher B]\n    C[Data Source N&lt;br/&gt;Type N] --&gt; DN[Dispatcher N]\n\n    D1 --&gt; N1[Processing Node&lt;br/&gt;DisruptorNode3]\n    D2 --&gt; N1\n    DN --&gt; N1\n\n    N1 --&gt; D4[Output Dispatcher]\n    D4 --&gt; N2[Next Node]\n\n    style A fill:#e1f5fe\n    style B fill:#e1f5fe\n    style C fill:#e1f5fe\n    style D1 fill:#f3e5f5\n    style D2 fill:#f3e5f5\n    style DN fill:#f3e5f5\n    style N1 fill:#e8f5e8\n    style D4 fill:#f3e5f5\n    style N2 fill:#e8f5e8</code></pre>"},{"location":"disruptor/conduit-framework/#basic-usage","title":"Basic Usage","text":""},{"location":"disruptor/conduit-framework/#simple-two-input-node","title":"Simple Two-Input Node","text":"<pre><code>import io.lightning.conduit.dispatcher.EventDispatcher;\nimport io.lightning.conduit.node.DisruptorNode2;\n\npublic class CombineNode extends DisruptorNode2&lt;Integer, String&gt; {\n    @Override\n    protected void onEvent1(Integer event) {\n        System.out.println(\"Received integer: \" + event);\n    }\n\n    @Override\n    protected void onEvent2(String event) {\n        System.out.println(\"Received string: \" + event);\n    }\n}\n\n// Usage\nEventDispatcher&lt;Integer&gt; intDispatcher = EventDispatcher.create();\nEventDispatcher&lt;String&gt; stringDispatcher = EventDispatcher.create();\n\nCombineNode combineNode = new CombineNode();\ncombineNode.subscribe1(intDispatcher);\ncombineNode.subscribe2(stringDispatcher);\ncombineNode.start();\n\n// Dispatch events\nintDispatcher.dispatch(42);\nstringDispatcher.dispatch(\"Hello, Conduit!\");\n</code></pre>"},{"location":"disruptor/conduit-framework/#financial-data-processing-example","title":"Financial Data Processing Example","text":"<pre><code>public class FinancialProcessor extends DisruptorNode3&lt;Price, Rate, Volume&gt; {\n    private double currentPrice;\n    private double currentRate;\n    private long currentVolume;\n\n    @Override\n    protected void onEvent1(Price price) {\n        currentPrice = price.getValue();\n        calculateMetrics();\n    }\n\n    @Override\n    protected void onEvent2(Rate rate) {\n        currentRate = rate.getValue();\n        calculateMetrics();\n    }\n\n    @Override\n    protected void onEvent3(Volume volume) {\n        currentVolume = volume.getAmount();\n        calculateMetrics();\n    }\n\n    private void calculateMetrics() {\n        // Combine all inputs to calculate trading metrics\n        double metric = currentPrice * currentRate * currentVolume;\n        System.out.println(\"Calculated metric: \" + metric);\n    }\n}\n\n// Setup\nEventDispatcher&lt;Price&gt; priceDispatcher = EventDispatcher.create();\nEventDispatcher&lt;Rate&gt; rateDispatcher = EventDispatcher.create();\nEventDispatcher&lt;Volume&gt; volumeDispatcher = EventDispatcher.create();\n\nFinancialProcessor processor = new FinancialProcessor();\nprocessor.subscribe1(priceDispatcher)\n         .subscribe2(rateDispatcher)\n         .subscribe3(volumeDispatcher);\nprocessor.start();\n</code></pre>"},{"location":"disruptor/conduit-framework/#node-types-comparison","title":"Node Types Comparison","text":""},{"location":"disruptor/conduit-framework/#plain-node-node2","title":"Plain Node (Node2)","text":"<p>Characteristics: - Each event handler runs on the dispatcher's thread - If two dispatchers call from different threads, handlers can run concurrently - No built-in synchronization</p> <p>Best for: - Independent event handlers with no shared state - Maximum parallelism across multiple CPU cores - CPU-bound processing where each handler can run independently</p>"},{"location":"disruptor/conduit-framework/#disruptor-node-disruptornode2","title":"Disruptor Node (DisruptorNode2)","text":"<p>Characteristics: - All events processed in a single thread (lock-free) - Events from all sources go through the Disruptor ring buffer - Guaranteed ordering and no race conditions</p> <p>Best for: - Handlers that share state - Low-latency requirements - Need to coordinate or order events from different sources - Lightweight, fast processing</p>"},{"location":"disruptor/conduit-framework/#fluent-api","title":"Fluent API","text":"<p>The Conduit framework provides a fluent API for easy pipeline construction:</p> <pre><code>DisruptorNode3&lt;Price, Rate, Volume&gt; processor = new FinancialProcessor();\n\nprocessor\n    .subscribe1(priceDispatcher)\n    .subscribe2(rateDispatcher)\n    .subscribe3(volumeDispatcher)\n    .start();\n</code></pre>"},{"location":"disruptor/conduit-framework/#configuration","title":"Configuration","text":""},{"location":"disruptor/conduit-framework/#disruptor-settings","title":"Disruptor Settings","text":"<p>DisruptorNodes can be configured with custom settings:</p> <pre><code>public class CustomNode extends DisruptorNode2&lt;Integer, String&gt; {\n    public CustomNode() {\n        super(\n            1024,  // Ring buffer size (must be power of 2)\n            new BusySpinWaitStrategy()  // Wait strategy\n        );\n    }\n\n    // ... event handlers\n}\n</code></pre>"},{"location":"disruptor/conduit-framework/#wait-strategies","title":"Wait Strategies","text":"<p>Choose based on your latency vs. CPU usage trade-off:</p> Strategy Latency CPU Usage Use Case BusySpinWaitStrategy Lowest Highest Ultra-low latency trading YieldingWaitStrategy Low High Low latency, some CPU yield SleepingWaitStrategy Medium Medium Balanced applications BlockingWaitStrategy Highest Lowest CPU-conscious applications"},{"location":"disruptor/conduit-framework/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"disruptor/conduit-framework/#pipeline-chaining","title":"Pipeline Chaining","text":"<p>Create complex processing pipelines by chaining nodes:</p> <pre><code>// Stage 1: Data ingestion\nDisruptorNode2&lt;RawData1, RawData2&gt; ingestionNode = new IngestionNode();\n\n// Stage 2: Data enrichment\nEventDispatcher&lt;EnrichedData&gt; enrichedDispatcher = EventDispatcher.create();\nDisruptorNode1&lt;EnrichedData&gt; enrichmentNode = new EnrichmentNode();\n\n// Stage 3: Analytics\nDisruptorNode1&lt;AnalyticsResult&gt; analyticsNode = new AnalyticsNode();\n\n// Connect the pipeline\ningestionNode.subscribe1(rawData1Dispatcher)\n             .subscribe2(rawData2Dispatcher);\ningestionNode.start();\n\nenrichmentNode.subscribe1(enrichedDispatcher);\nenrichmentNode.start();\n\nanalyticsNode.subscribe1(analyticsDispatcher);\nanalyticsNode.start();\n</code></pre>"},{"location":"disruptor/conduit-framework/#fan-out-pattern","title":"Fan-out Pattern","text":"<p>Distribute events to multiple consumers:</p> <pre><code>EventDispatcher&lt;MarketData&gt; marketDataDispatcher = EventDispatcher.create();\n\n// Multiple nodes subscribe to the same dispatcher\nDisruptorNode1&lt;MarketData&gt; riskNode = new RiskCalculationNode();\nDisruptorNode1&lt;MarketData&gt; analyticsNode = new AnalyticsNode();\nDisruptorNode1&lt;MarketData&gt; auditNode = new AuditNode();\n\nriskNode.subscribe1(marketDataDispatcher).start();\nanalyticsNode.subscribe1(marketDataDispatcher).start();\nauditNode.subscribe1(marketDataDispatcher).start();\n</code></pre>"},{"location":"disruptor/conduit-framework/#error-handling","title":"Error Handling","text":"<p>Implement error handling in your event handlers:</p> <pre><code>public class RobustNode extends DisruptorNode2&lt;Integer, String&gt; {\n    @Override\n    protected void onEvent1(Integer event) {\n        try {\n            // Process event\n            processInteger(event);\n        } catch (Exception e) {\n            handleError(e, event);\n        }\n    }\n\n    private void handleError(Exception e, Object event) {\n        // Log error, send to dead letter queue, etc.\n        logger.error(\"Error processing event: \" + event, e);\n    }\n}\n</code></pre>"},{"location":"disruptor/conduit-framework/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the Right Node Type</li> <li>Use <code>DisruptorNode</code> for low-latency, ordered processing</li> <li> <p>Use plain <code>Node</code> for independent, parallel processing</p> </li> <li> <p>Keep Event Handlers Fast</p> </li> <li>Avoid blocking operations (I/O, network calls)</li> <li> <p>Offload heavy computations to worker threads if needed</p> </li> <li> <p>Pre-allocate Resources</p> </li> <li>Initialize objects in constructor, not in event handlers</li> <li> <p>Reuse objects to minimize GC pressure</p> </li> <li> <p>Monitor Performance</p> </li> <li>Track event processing time</li> <li>Monitor ring buffer fullness</li> <li> <p>Watch for backpressure</p> </li> <li> <p>Graceful Shutdown</p> </li> <li>Implement proper lifecycle management</li> <li>Drain remaining events before shutdown</li> </ol>"},{"location":"disruptor/conduit-framework/#lifecycle-management","title":"Lifecycle Management","text":"<pre><code>// Start processing\nnode.start();\n\n// Shutdown gracefully\nnode.shutdown();\n</code></pre>"},{"location":"disruptor/conduit-framework/#dependencies","title":"Dependencies","text":"<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lmax&lt;/groupId&gt;\n        &lt;artifactId&gt;disruptor&lt;/artifactId&gt;\n        &lt;version&gt;4.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n        &lt;version&gt;2.0.9&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"disruptor/conduit-framework/#next-steps","title":"Next Steps","text":"<ul> <li>Performance Comparison - Detailed performance analysis</li> <li>Example Applications - Real-world usage examples</li> <li>LMAX Disruptor Overview - Learn about the underlying technology</li> </ul>"},{"location":"disruptor/examples/","title":"Conduit Framework - Example Applications","text":"<p>This page provides real-world examples and complete applications using the Conduit framework.</p>"},{"location":"disruptor/examples/#example-1-market-data-processing","title":"Example 1: Market Data Processing","text":"<p>A financial trading system that processes market data from multiple sources.</p>"},{"location":"disruptor/examples/#scenario","title":"Scenario","text":"<ul> <li>Receive price updates from multiple exchanges</li> <li>Process order book updates</li> <li>Calculate spread and liquidity metrics</li> <li>Trigger trading signals</li> </ul>"},{"location":"disruptor/examples/#implementation","title":"Implementation","text":"<pre><code>import io.lightning.conduit.dispatcher.EventDispatcher;\nimport io.lightning.conduit.node.DisruptorNode3;\n\n// Domain objects\nrecord Price(String symbol, double bid, double ask, long timestamp) {}\nrecord OrderBook(String symbol, List&lt;Order&gt; bids, List&lt;Order&gt; asks) {}\nrecord Trade(String symbol, double price, long volume, long timestamp) {}\n\n// Processing node\npublic class MarketDataProcessor extends DisruptorNode3&lt;Price, OrderBook, Trade&gt; {\n    private final Map&lt;String, Price&gt; currentPrices = new HashMap&lt;&gt;();\n    private final Map&lt;String, OrderBook&gt; currentBooks = new HashMap&lt;&gt;();\n    private final EventDispatcher&lt;TradingSignal&gt; signalDispatcher;\n\n    public MarketDataProcessor(EventDispatcher&lt;TradingSignal&gt; signalDispatcher) {\n        this.signalDispatcher = signalDispatcher;\n    }\n\n    @Override\n    protected void onEvent1(Price price) {\n        currentPrices.put(price.symbol(), price);\n\n        double spread = price.ask() - price.bid();\n        double midPrice = (price.bid() + price.ask()) / 2.0;\n\n        // Check for trading opportunities\n        if (spread &lt; 0.01) { // Tight spread\n            TradingSignal signal = new TradingSignal(\n                price.symbol(),\n                midPrice,\n                \"TIGHT_SPREAD\"\n            );\n            signalDispatcher.dispatch(signal);\n        }\n    }\n\n    @Override\n    protected void onEvent2(OrderBook book) {\n        currentBooks.put(book.symbol(), book);\n\n        // Calculate liquidity\n        double bidLiquidity = book.bids().stream()\n            .mapToDouble(Order::volume)\n            .sum();\n        double askLiquidity = book.asks().stream()\n            .mapToDouble(Order::volume)\n            .sum();\n\n        System.out.printf(\"Liquidity %s: Bid=%.0f Ask=%.0f%n\",\n            book.symbol(), bidLiquidity, askLiquidity);\n    }\n\n    @Override\n    protected void onEvent3(Trade trade) {\n        Price currentPrice = currentPrices.get(trade.symbol());\n        if (currentPrice != null) {\n            double midPrice = (currentPrice.bid() + currentPrice.ask()) / 2.0;\n\n            // Detect large trades\n            if (trade.volume() &gt; 10000) {\n                System.out.printf(\"Large trade detected: %s %,.0f @ %.2f%n\",\n                    trade.symbol(), trade.volume(), trade.price());\n\n                // Dispatch alert\n                TradingSignal signal = new TradingSignal(\n                    trade.symbol(),\n                    trade.price(),\n                    \"LARGE_TRADE\"\n                );\n                signalDispatcher.dispatch(signal);\n            }\n        }\n    }\n}\n\n// Main application\npublic class TradingApplication {\n    public static void main(String[] args) throws Exception {\n        // Create dispatchers\n        EventDispatcher&lt;Price&gt; priceDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;OrderBook&gt; bookDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Trade&gt; tradeDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;TradingSignal&gt; signalDispatcher = EventDispatcher.create();\n\n        // Create and start processor\n        MarketDataProcessor processor = new MarketDataProcessor(signalDispatcher);\n        processor.subscribe1(priceDispatcher)\n                 .subscribe2(bookDispatcher)\n                 .subscribe3(tradeDispatcher);\n        processor.start();\n\n        // Create signal handler\n        DisruptorNode1&lt;TradingSignal&gt; signalHandler = new SignalHandler();\n        signalHandler.subscribe1(signalDispatcher);\n        signalHandler.start();\n\n        // Simulate market data (in real app, this comes from market feeds)\n        new Thread(() -&gt; {\n            while (true) {\n                Price price = new Price(\"AAPL\", 150.25, 150.27, System.nanoTime());\n                priceDispatcher.dispatch(price);\n                sleep(100);\n            }\n        }).start();\n\n        Thread.sleep(Long.MAX_VALUE); // Keep running\n    }\n\n    private static void sleep(long ms) {\n        try { Thread.sleep(ms); } catch (InterruptedException e) {}\n    }\n}\n</code></pre>"},{"location":"disruptor/examples/#example-2-real-time-analytics-pipeline","title":"Example 2: Real-Time Analytics Pipeline","text":"<p>Process sensor data from IoT devices and calculate real-time metrics.</p>"},{"location":"disruptor/examples/#scenario_1","title":"Scenario","text":"<ul> <li>Receive temperature readings</li> <li>Receive humidity readings</li> <li>Receive motion detection events</li> <li>Calculate comfort index and trigger alerts</li> </ul>"},{"location":"disruptor/examples/#implementation_1","title":"Implementation","text":"<pre><code>import io.lightning.conduit.dispatcher.EventDispatcher;\nimport io.lightning.conduit.node.DisruptorNode3;\n\n// Sensor data types\nrecord Temperature(String sensorId, double celsius, long timestamp) {}\nrecord Humidity(String sensorId, double percentage, long timestamp) {}\nrecord Motion(String sensorId, boolean detected, long timestamp) {}\n\n// Alert type\nrecord Alert(String type, String message, String sensorId) {}\n\npublic class IoTAnalytics extends DisruptorNode3&lt;Temperature, Humidity, Motion&gt; {\n    private final Map&lt;String, Double&gt; temperatures = new ConcurrentHashMap&lt;&gt;();\n    private final Map&lt;String, Double&gt; humidity = new ConcurrentHashMap&lt;&gt;();\n    private final EventDispatcher&lt;Alert&gt; alertDispatcher;\n\n    public IoTAnalytics(EventDispatcher&lt;Alert&gt; alertDispatcher) {\n        this.alertDispatcher = alertDispatcher;\n    }\n\n    @Override\n    protected void onEvent1(Temperature temp) {\n        temperatures.put(temp.sensorId(), temp.celsius());\n\n        // Check for extreme temperature\n        if (temp.celsius() &gt; 35.0) {\n            Alert alert = new Alert(\n                \"HIGH_TEMPERATURE\",\n                String.format(\"Temperature %.1f\u00b0C exceeds threshold\", temp.celsius()),\n                temp.sensorId()\n            );\n            alertDispatcher.dispatch(alert);\n        }\n\n        // Calculate comfort index if we have both temp and humidity\n        Double h = humidity.get(temp.sensorId());\n        if (h != null) {\n            double comfortIndex = calculateComfortIndex(temp.celsius(), h);\n            System.out.printf(\"Comfort index for %s: %.1f%n\",\n                temp.sensorId(), comfortIndex);\n        }\n    }\n\n    @Override\n    protected void onEvent2(Humidity hum) {\n        humidity.put(hum.sensorId(), hum.percentage());\n\n        // Check for high humidity\n        if (hum.percentage() &gt; 70.0) {\n            Alert alert = new Alert(\n                \"HIGH_HUMIDITY\",\n                String.format(\"Humidity %.1f%% exceeds threshold\", hum.percentage()),\n                hum.sensorId()\n            );\n            alertDispatcher.dispatch(alert);\n        }\n    }\n\n    @Override\n    protected void onEvent3(Motion motion) {\n        if (motion.detected()) {\n            System.out.printf(\"Motion detected: %s at %d%n\",\n                motion.sensorId(), motion.timestamp());\n\n            // Correlate with temperature for occupancy comfort\n            Double temp = temperatures.get(motion.sensorId());\n            if (temp != null &amp;&amp; (temp &lt; 18 || temp &gt; 26)) {\n                Alert alert = new Alert(\n                    \"UNCOMFORTABLE_OCCUPANCY\",\n                    String.format(\"Motion detected but temperature %.1f\u00b0C is uncomfortable\", temp),\n                    motion.sensorId()\n                );\n                alertDispatcher.dispatch(alert);\n            }\n        }\n    }\n\n    private double calculateComfortIndex(double tempC, double humidity) {\n        // Simplified comfort index calculation\n        return tempC - (0.55 - 0.0055 * humidity) * (tempC - 14.5);\n    }\n}\n\n// Alert handler\npublic class AlertHandler extends DisruptorNode1&lt;Alert&gt; {\n    @Override\n    protected void onEvent1(Alert alert) {\n        System.err.printf(\"[ALERT] %s: %s (Sensor: %s)%n\",\n            alert.type(), alert.message(), alert.sensorId());\n\n        // In real application: send email, SMS, push notification, etc.\n        sendNotification(alert);\n    }\n\n    private void sendNotification(Alert alert) {\n        // Implementation for sending notifications\n    }\n}\n\n// Main application\npublic class IoTApplication {\n    public static void main(String[] args) throws Exception {\n        // Create dispatchers\n        EventDispatcher&lt;Temperature&gt; tempDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Humidity&gt; humidityDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Motion&gt; motionDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Alert&gt; alertDispatcher = EventDispatcher.create();\n\n        // Create and start analytics\n        IoTAnalytics analytics = new IoTAnalytics(alertDispatcher);\n        analytics.subscribe1(tempDispatcher)\n                 .subscribe2(humidityDispatcher)\n                 .subscribe3(motionDispatcher);\n        analytics.start();\n\n        // Create and start alert handler\n        AlertHandler alertHandler = new AlertHandler();\n        alertHandler.subscribe1(alertDispatcher);\n        alertHandler.start();\n\n        // Simulate sensor data\n        simulateSensorData(tempDispatcher, humidityDispatcher, motionDispatcher);\n    }\n\n    private static void simulateSensorData(\n            EventDispatcher&lt;Temperature&gt; tempDispatcher,\n            EventDispatcher&lt;Humidity&gt; humidityDispatcher,\n            EventDispatcher&lt;Motion&gt; motionDispatcher) {\n\n        Random random = new Random();\n\n        while (true) {\n            String sensorId = \"sensor-\" + (random.nextInt(5) + 1);\n\n            // Temperature reading\n            double temp = 20 + random.nextDouble() * 10;\n            tempDispatcher.dispatch(new Temperature(sensorId, temp, System.nanoTime()));\n\n            // Humidity reading\n            double humidity = 40 + random.nextDouble() * 30;\n            humidityDispatcher.dispatch(new Humidity(sensorId, humidity, System.nanoTime()));\n\n            // Motion detection (20% chance)\n            if (random.nextDouble() &lt; 0.2) {\n                motionDispatcher.dispatch(new Motion(sensorId, true, System.nanoTime()));\n            }\n\n            sleep(1000);\n        }\n    }\n\n    private static void sleep(long ms) {\n        try { Thread.sleep(ms); } catch (InterruptedException e) {}\n    }\n}\n</code></pre>"},{"location":"disruptor/examples/#example-3-event-sourcing-system","title":"Example 3: Event Sourcing System","text":"<p>Build an event-sourced application with CQRS pattern.</p>"},{"location":"disruptor/examples/#scenario_2","title":"Scenario","text":"<ul> <li>Receive commands (create, update, delete)</li> <li>Generate events</li> <li>Update read models</li> <li>Maintain event log</li> </ul>"},{"location":"disruptor/examples/#implementation_2","title":"Implementation","text":"<pre><code>import io.lightning.conduit.dispatcher.EventDispatcher;\nimport io.lightning.conduit.node.DisruptorNode2;\n\n// Commands\nsealed interface Command permits CreateUser, UpdateUser, DeleteUser {}\nrecord CreateUser(String userId, String name, String email) implements Command {}\nrecord UpdateUser(String userId, String name, String email) implements Command {}\nrecord DeleteUser(String userId) implements Command {}\n\n// Events\nsealed interface Event permits UserCreated, UserUpdated, UserDeleted {}\nrecord UserCreated(String userId, String name, String email, long timestamp) implements Event {}\nrecord UserUpdated(String userId, String name, String email, long timestamp) implements Event {}\nrecord UserDeleted(String userId, long timestamp) implements Event {}\n\n// Command Handler - generates events from commands\npublic class CommandHandler extends DisruptorNode1&lt;Command&gt; {\n    private final EventDispatcher&lt;Event&gt; eventDispatcher;\n    private final Map&lt;String, User&gt; currentState = new HashMap&lt;&gt;();\n\n    public CommandHandler(EventDispatcher&lt;Event&gt; eventDispatcher) {\n        this.eventDispatcher = eventDispatcher;\n    }\n\n    @Override\n    protected void onEvent1(Command command) {\n        switch (command) {\n            case CreateUser cmd -&gt; {\n                if (!currentState.containsKey(cmd.userId())) {\n                    UserCreated event = new UserCreated(\n                        cmd.userId(), cmd.name(), cmd.email(), System.currentTimeMillis()\n                    );\n                    eventDispatcher.dispatch(event);\n                }\n            }\n            case UpdateUser cmd -&gt; {\n                if (currentState.containsKey(cmd.userId())) {\n                    UserUpdated event = new UserUpdated(\n                        cmd.userId(), cmd.name(), cmd.email(), System.currentTimeMillis()\n                    );\n                    eventDispatcher.dispatch(event);\n                }\n            }\n            case DeleteUser cmd -&gt; {\n                if (currentState.containsKey(cmd.userId())) {\n                    UserDeleted event = new UserDeleted(\n                        cmd.userId(), System.currentTimeMillis()\n                    );\n                    eventDispatcher.dispatch(event);\n                }\n            }\n        }\n    }\n}\n\n// Event Processor - updates read model and event log\npublic class EventProcessor extends DisruptorNode1&lt;Event&gt; {\n    private final Map&lt;String, User&gt; readModel = new ConcurrentHashMap&lt;&gt;();\n    private final List&lt;Event&gt; eventLog = new ArrayList&lt;&gt;();\n\n    @Override\n    protected void onEvent1(Event event) {\n        // Append to event log\n        synchronized (eventLog) {\n            eventLog.add(event);\n        }\n\n        // Update read model\n        switch (event) {\n            case UserCreated e -&gt; {\n                User user = new User(e.userId(), e.name(), e.email());\n                readModel.put(e.userId(), user);\n                System.out.printf(\"User created: %s%n\", user);\n            }\n            case UserUpdated e -&gt; {\n                User user = new User(e.userId(), e.name(), e.email());\n                readModel.put(e.userId(), user);\n                System.out.printf(\"User updated: %s%n\", user);\n            }\n            case UserDeleted e -&gt; {\n                readModel.remove(e.userId());\n                System.out.printf(\"User deleted: %s%n\", e.userId());\n            }\n        }\n    }\n\n    public Map&lt;String, User&gt; getReadModel() {\n        return Collections.unmodifiableMap(readModel);\n    }\n\n    public List&lt;Event&gt; getEventLog() {\n        synchronized (eventLog) {\n            return new ArrayList&lt;&gt;(eventLog);\n        }\n    }\n}\n\n// User entity\nrecord User(String userId, String name, String email) {}\n\n// Main application\npublic class EventSourcingApp {\n    public static void main(String[] args) throws Exception {\n        // Create dispatchers\n        EventDispatcher&lt;Command&gt; commandDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Event&gt; eventDispatcher = EventDispatcher.create();\n\n        // Create command handler\n        CommandHandler commandHandler = new CommandHandler(eventDispatcher);\n        commandHandler.subscribe1(commandDispatcher);\n        commandHandler.start();\n\n        // Create event processor\n        EventProcessor eventProcessor = new EventProcessor();\n        eventProcessor.subscribe1(eventDispatcher);\n        eventProcessor.start();\n\n        // Execute commands\n        commandDispatcher.dispatch(new CreateUser(\"user1\", \"Alice\", \"alice@example.com\"));\n        commandDispatcher.dispatch(new CreateUser(\"user2\", \"Bob\", \"bob@example.com\"));\n        Thread.sleep(100);\n\n        commandDispatcher.dispatch(new UpdateUser(\"user1\", \"Alice Smith\", \"alice.smith@example.com\"));\n        Thread.sleep(100);\n\n        commandDispatcher.dispatch(new DeleteUser(\"user2\"));\n        Thread.sleep(100);\n\n        // Query read model\n        System.out.println(\"\\nCurrent State:\");\n        eventProcessor.getReadModel().forEach((id, user) -&gt;\n            System.out.printf(\"  %s: %s (%s)%n\", id, user.name(), user.email())\n        );\n\n        // View event log\n        System.out.println(\"\\nEvent Log:\");\n        eventProcessor.getEventLog().forEach(event -&gt;\n            System.out.printf(\"  %s%n\", event)\n        );\n    }\n}\n</code></pre>"},{"location":"disruptor/examples/#example-4-log-aggregation-system","title":"Example 4: Log Aggregation System","text":"<p>Aggregate and process log entries from multiple services.</p>"},{"location":"disruptor/examples/#scenario_3","title":"Scenario","text":"<ul> <li>Receive application logs</li> <li>Receive system logs</li> <li>Parse and categorize logs</li> <li>Generate metrics and alerts</li> </ul>"},{"location":"disruptor/examples/#implementation_3","title":"Implementation","text":"<pre><code>import io.lightning.conduit.dispatcher.EventDispatcher;\nimport io.lightning.conduit.node.DisruptorNode2;\n\n// Log types\nrecord AppLog(String service, String level, String message, long timestamp) {}\nrecord SystemLog(String host, String subsystem, String message, long timestamp) {}\n\n// Metrics\nrecord LogMetrics(String source, Map&lt;String, Long&gt; levelCounts) {}\n\npublic class LogAggregator extends DisruptorNode2&lt;AppLog, SystemLog&gt; {\n    private final Map&lt;String, AtomicLong&gt; errorCounts = new ConcurrentHashMap&lt;&gt;();\n    private final EventDispatcher&lt;Alert&gt; alertDispatcher;\n\n    public LogAggregator(EventDispatcher&lt;Alert&gt; alertDispatcher) {\n        this.alertDispatcher = alertDispatcher;\n    }\n\n    @Override\n    protected void onEvent1(AppLog log) {\n        // Count errors by service\n        if (\"ERROR\".equals(log.level()) || \"FATAL\".equals(log.level())) {\n            errorCounts.computeIfAbsent(log.service(), k -&gt; new AtomicLong())\n                       .incrementAndGet();\n\n            // Alert on high error rate\n            if (errorCounts.get(log.service()).get() % 10 == 0) {\n                Alert alert = new Alert(\n                    \"HIGH_ERROR_RATE\",\n                    String.format(\"%s has logged %d errors\",\n                        log.service(), errorCounts.get(log.service()).get()),\n                    log.service()\n                );\n                alertDispatcher.dispatch(alert);\n            }\n        }\n\n        // Log processing\n        System.out.printf(\"[%s] %s: %s%n\", log.level(), log.service(), log.message());\n    }\n\n    @Override\n    protected void onEvent2(SystemLog log) {\n        // Process system logs\n        System.out.printf(\"[SYSTEM] %s/%s: %s%n\",\n            log.host(), log.subsystem(), log.message());\n\n        // Check for critical system events\n        if (log.message().contains(\"Out of memory\") ||\n            log.message().contains(\"Disk full\")) {\n            Alert alert = new Alert(\n                \"SYSTEM_CRITICAL\",\n                log.message(),\n                log.host()\n            );\n            alertDispatcher.dispatch(alert);\n        }\n    }\n}\n\npublic class LogApplication {\n    public static void main(String[] args) throws Exception {\n        EventDispatcher&lt;AppLog&gt; appLogDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;SystemLog&gt; sysLogDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;Alert&gt; alertDispatcher = EventDispatcher.create();\n\n        LogAggregator aggregator = new LogAggregator(alertDispatcher);\n        aggregator.subscribe1(appLogDispatcher)\n                  .subscribe2(sysLogDispatcher);\n        aggregator.start();\n\n        AlertHandler alertHandler = new AlertHandler();\n        alertHandler.subscribe1(alertDispatcher);\n        alertHandler.start();\n\n        // Simulate logs\n        simulateLogs(appLogDispatcher, sysLogDispatcher);\n    }\n}\n</code></pre>"},{"location":"disruptor/examples/#testing-your-conduit-application","title":"Testing Your Conduit Application","text":""},{"location":"disruptor/examples/#unit-testing","title":"Unit Testing","text":"<pre><code>import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MarketDataProcessorTest {\n    private EventDispatcher&lt;Price&gt; priceDispatcher;\n    private EventDispatcher&lt;TradingSignal&gt; signalDispatcher;\n    private MarketDataProcessor processor;\n    private List&lt;TradingSignal&gt; capturedSignals;\n\n    @BeforeEach\n    void setup() {\n        priceDispatcher = EventDispatcher.create();\n        signalDispatcher = EventDispatcher.create();\n        capturedSignals = new ArrayList&lt;&gt;();\n\n        // Capture signals\n        signalDispatcher.register(signal -&gt; capturedSignals.add(signal));\n\n        processor = new MarketDataProcessor(signalDispatcher);\n        processor.subscribe1(priceDispatcher);\n        processor.start();\n    }\n\n    @Test\n    void shouldDetectTightSpread() throws Exception {\n        Price price = new Price(\"AAPL\", 150.00, 150.01, System.nanoTime());\n        priceDispatcher.dispatch(price);\n\n        Thread.sleep(100); // Wait for processing\n\n        assertEquals(1, capturedSignals.size());\n        assertEquals(\"TIGHT_SPREAD\", capturedSignals.get(0).type());\n    }\n}\n</code></pre>"},{"location":"disruptor/examples/#performance-tips","title":"Performance Tips","text":"<ol> <li>Keep event handlers lightweight - Process quickly and return</li> <li>Use object pooling - Reuse objects to reduce GC pressure</li> <li>Choose appropriate ring buffer size - Power of 2, typically 1024-8192</li> <li>Monitor backpressure - Watch for ring buffer fullness</li> <li>Offload I/O - Use separate thread pools for blocking operations</li> </ol>"},{"location":"disruptor/examples/#next-steps","title":"Next Steps","text":"<ul> <li>LMAX Disruptor Overview</li> <li>Conduit Framework Guide</li> <li>Performance Analysis</li> </ul>"},{"location":"disruptor/performance/","title":"Performance Analysis: DisruptorNode vs Plain Node","text":"<p>This document provides a comprehensive analysis of the performance characteristics of DisruptorNode (Disruptor-based, single-threaded processing) versus plain Node (multi-threaded processing) implementations in the Conduit framework.</p>"},{"location":"disruptor/performance/#executive-summary","title":"Executive Summary","text":"Metric DisruptorNode Plain Node Throughput Very high (millions/sec) Moderate Latency Consistently low (sub-microsecond) Variable Scalability Excellent for producers Limited by thread contention Synchronization None needed Explicit sync required Complexity Simple handler logic More complex (thread-safety) Best Use Case High-performance, low-latency Independent parallel processing"},{"location":"disruptor/performance/#threading-model-comparison","title":"Threading Model Comparison","text":""},{"location":"disruptor/performance/#plain-node-node2","title":"Plain Node (Node2)","text":"<p>When using plain nodes with multiple input sources:</p> <pre><code>EventDispatcher&lt;Integer&gt; intDispatcher = EventDispatcher.create();\nEventDispatcher&lt;String&gt; stringDispatcher = EventDispatcher.create();\n\nNode2&lt;Integer, String&gt; node = new PlainNode();\nnode.subscribe1(intDispatcher);\nnode.subscribe2(stringDispatcher);\nnode.start();\n</code></pre> <p>Threading Behavior: - If Thread A calls <code>intDispatcher.dispatch(42)</code>, Thread A executes <code>onEvent1()</code> - If Thread B calls <code>stringDispatcher.dispatch(\"Hello\")</code>, Thread B executes <code>onEvent2()</code> - Both handlers can run concurrently on different threads</p> <pre><code>graph LR\n    A[Thread A] --&gt;|dispatch int| D1[Int Dispatcher]\n    B[Thread B] --&gt;|dispatch string| D2[String Dispatcher]\n    D1 --&gt;|Thread A| E1[onEvent1]\n    D2 --&gt;|Thread B| E2[onEvent2]\n    E1 -.concurrent.-&gt; E2\n\n    style E1 fill:#ffebee\n    style E2 fill:#e3f2fd</code></pre>"},{"location":"disruptor/performance/#disruptornode-disruptornode2","title":"DisruptorNode (DisruptorNode2)","text":"<pre><code>EventDispatcher&lt;Integer&gt; intDispatcher = EventDispatcher.create();\nEventDispatcher&lt;String&gt; stringDispatcher = EventDispatcher.create();\n\nDisruptorNode2&lt;Integer, String&gt; node = new DisruptorNode();\nnode.subscribe1(intDispatcher);\nnode.subscribe2(stringDispatcher);\nnode.start();\n</code></pre> <p>Threading Behavior: - Events from both dispatchers go into the same ring buffer - A single consumer thread processes all events sequentially - No concurrent execution of event handlers</p> <pre><code>graph LR\n    A[Thread A] --&gt;|dispatch int| RB[Ring Buffer]\n    B[Thread B] --&gt;|dispatch string| RB\n    RB --&gt;|Single Thread| CT[Consumer Thread]\n    CT --&gt; E1[onEvent1]\n    CT --&gt; E2[onEvent2]\n\n    style RB fill:#f3e5f5\n    style CT fill:#e8f5e8</code></pre>"},{"location":"disruptor/performance/#when-to-use-each-approach","title":"When to Use Each Approach","text":""},{"location":"disruptor/performance/#use-plain-node-when","title":"Use Plain Node When:","text":"<ol> <li>Event handlers are truly independent</li> <li>No shared state between handlers</li> <li> <p>Each handler can run in complete isolation</p> </li> <li> <p>CPU-bound processing with available cores</p> </li> <li>Heavy computations in each handler</li> <li>Multiple CPU cores available for parallel execution</li> <li> <p>Each handler can utilize a full core</p> </li> <li> <p>Maximum throughput is critical</p> </li> <li>Want to process events from different sources in parallel</li> <li>Can accept the complexity of thread-safety</li> </ol> <p>Example: Image Processing Pipeline</p> <pre><code>public class ImageProcessorNode extends Node2&lt;RawImage, Metadata&gt; {\n    @Override\n    protected void onEvent1(RawImage image) {\n        // Heavy CPU-bound operation\n        byte[] processed = applyFilters(image);  // 100ms\n        saveImage(processed);\n    }\n\n    @Override\n    protected void onEvent2(Metadata metadata) {\n        // Heavy CPU-bound operation\n        extractFeatures(metadata);  // 100ms\n        indexMetadata(metadata);\n    }\n}\n</code></pre> <p>With 2 threads, you can process both events in parallel \u2192 100ms total With DisruptorNode, events are sequential \u2192 200ms total</p>"},{"location":"disruptor/performance/#use-disruptornode-when","title":"Use DisruptorNode When:","text":"<ol> <li>Handlers share state</li> <li>Multiple handlers access/modify common data</li> <li> <p>Need to coordinate between different event types</p> </li> <li> <p>Order matters</p> </li> <li>Need to guarantee event processing order</li> <li> <p>Coordination between different input sources</p> </li> <li> <p>Low latency is critical</p> </li> <li>Sub-microsecond latency requirements</li> <li>Consistent, predictable latency</li> <li> <p>No lock contention or context switching overhead</p> </li> <li> <p>Event processing is lightweight</p> </li> <li>Fast event handlers (microseconds)</li> <li>High event rate</li> <li>Minimal CPU per event</li> </ol> <p>Example: Trading System</p> <pre><code>public class TradingNode extends DisruptorNode3&lt;Price, Order, Position&gt; {\n    private double currentPrice;\n    private Map&lt;String, Position&gt; positions = new HashMap&lt;&gt;();\n\n    @Override\n    protected void onEvent1(Price price) {\n        this.currentPrice = price.getValue();  // Share state\n        checkStopLoss();  // Needs current price + positions\n    }\n\n    @Override\n    protected void onEvent2(Order order) {\n        // Needs current price for validation\n        if (order.getPrice() &lt;= currentPrice * 1.05) {\n            executeOrder(order);\n        }\n    }\n\n    @Override\n    protected void onEvent3(Position position) {\n        positions.put(position.getSymbol(), position);  // Share state\n    }\n}\n</code></pre>"},{"location":"disruptor/performance/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"disruptor/performance/#1-throughput","title":"1. Throughput","text":""},{"location":"disruptor/performance/#disruptornode","title":"DisruptorNode","text":"<ul> <li>Lock-free multi-producer, single-consumer design</li> <li>Can achieve 10-25 million operations/second on modern hardware</li> <li>Multiple threads can publish to ring buffer concurrently with minimal contention</li> <li>Single consumer processes events as fast as possible</li> </ul> <p>Benchmark Results:</p> <pre><code>DisruptorNode2 Throughput: 25,000,000 ops/sec\nRing Buffer Size: 1024\nWait Strategy: BusySpinWaitStrategy\nHardware: Intel i9-12900K, 32GB RAM\n</code></pre>"},{"location":"disruptor/performance/#plain-node","title":"Plain Node","text":"<ul> <li>Limited by lock contention and synchronization</li> <li>Typically 3-8 million operations/second</li> <li>Performance degrades with increased thread count</li> <li>Context switching overhead reduces throughput</li> </ul> <pre><code>Plain Node2 Throughput: 5,000,000 ops/sec\nSynchronization: ReentrantLock\nHardware: Intel i9-12900K, 32GB RAM\n</code></pre>"},{"location":"disruptor/performance/#2-latency","title":"2. Latency","text":""},{"location":"disruptor/performance/#disruptornode_1","title":"DisruptorNode","text":"<p>Latency Distribution:</p> <pre><code>P50:  250 nanoseconds\nP99:  500 nanoseconds\nP99.9: 2 microseconds\nMax:   10 microseconds\n</code></pre> <p>Why Low Latency? - No lock contention - No context switches - Cache-friendly ring buffer - Minimal memory allocation - Busy-spin wait strategy</p> <pre><code>graph LR\n    A[Producer] --&gt;|CAS| B[Ring Buffer]\n    B --&gt;|Cache Hit| C[Consumer]\n    C --&gt;|L1/L2 Cache| D[Process]\n\n    style B fill:#f3e5f5\n    style C fill:#c8e6c9</code></pre>"},{"location":"disruptor/performance/#plain-node_1","title":"Plain Node","text":"<p>Latency Distribution:</p> <pre><code>P50:  5 microseconds\nP99:  50 microseconds\nP99.9: 500 microseconds\nMax:   10 milliseconds (outliers)\n</code></pre> <p>Why Higher Latency? - Lock acquisition overhead - Context switching - Cache invalidation - Unpredictable blocking</p>"},{"location":"disruptor/performance/#3-cpu-bound-vs-io-bound-processing","title":"3. CPU-Bound vs I/O-Bound Processing","text":""},{"location":"disruptor/performance/#cpu-bound-tasks","title":"CPU-Bound Tasks","text":"<p>Scenario: Each event requires heavy computation (100ms)</p> Approach Processing Time CPU Usage Plain Node (2 threads) 100ms (parallel) 200% DisruptorNode (1 thread) 200ms (sequential) 100% <p>Winner: Plain Node (if CPU cores available)</p>"},{"location":"disruptor/performance/#io-bound-tasks","title":"I/O-Bound Tasks","text":"<p>Scenario: Each event waits for I/O (100ms blocking I/O)</p> Approach Processing Time Issues Plain Node High latency Thread blocking DisruptorNode Terrible Single thread blocks entire pipeline <p>Winner: Neither - use async I/O or thread pools instead</p> <p>Best Practice for I/O:</p> <pre><code>public class AsyncNode extends DisruptorNode2&lt;Integer, String&gt; {\n    private ExecutorService ioExecutor = Executors.newFixedThreadPool(10);\n\n    @Override\n    protected void onEvent1(Integer event) {\n        // Don't block the Disruptor thread!\n        ioExecutor.submit(() -&gt; {\n            // Do I/O work here\n            networkCall(event);\n        });\n    }\n\n    @Override\n    protected void onEvent2(String event) {\n        // Fast, non-blocking processing only\n        processInMemory(event);\n    }\n}\n</code></pre>"},{"location":"disruptor/performance/#4-scalability","title":"4. Scalability","text":""},{"location":"disruptor/performance/#disruptornode-scalability","title":"DisruptorNode Scalability","text":"<p>Excellent for scaling producers:</p> <pre><code>graph TB\n    P1[Producer 1] --&gt; RB[Ring Buffer]\n    P2[Producer 2] --&gt; RB\n    P3[Producer 3] --&gt; RB\n    P4[Producer N] --&gt; RB\n    RB --&gt; C[Single Consumer]\n\n    style RB fill:#f3e5f5\n    style C fill:#c8e6c9</code></pre> <ul> <li>Multiple producers can publish concurrently</li> <li>CAS operations minimize contention</li> <li>Single consumer avoids coordination overhead</li> </ul> <p>Limitation: Single consumer can become bottleneck if processing is slow</p>"},{"location":"disruptor/performance/#plain-node-scalability","title":"Plain Node Scalability","text":"<p>Limited by thread contention:</p> <pre><code>graph TB\n    P1[Thread 1] --&gt;|Lock| H1[Handler 1]\n    P2[Thread 2] --&gt;|Lock| H2[Handler 2]\n    P3[Thread 3] --&gt;|Lock| H3[Handler 3]\n    H1 -.contention.-&gt; SS[Shared State]\n    H2 -.contention.-&gt; SS\n    H3 -.contention.-&gt; SS\n\n    style SS fill:#ffebee</code></pre> <ul> <li>Each additional thread increases contention</li> <li>Lock acquisition becomes bottleneck</li> <li>Context switching overhead increases</li> </ul>"},{"location":"disruptor/performance/#5-memory-efficiency","title":"5. Memory Efficiency","text":""},{"location":"disruptor/performance/#disruptornode_2","title":"DisruptorNode","text":"<p>Pre-allocated Ring Buffer:</p> <pre><code>// Pre-allocate 1024 slots at startup\nDisruptorNode2&lt;Integer, String&gt; node = new DisruptorNode2&lt;&gt;();\n// Ring buffer size: 1024 * sizeof(Event wrapper) \u2248 8KB\n</code></pre> <p>Benefits: - No garbage collection during event processing - Predictable memory usage - Cache-friendly memory layout</p>"},{"location":"disruptor/performance/#plain-node_2","title":"Plain Node","text":"<p>Dynamic Allocation: - May allocate synchronization objects - Potential for garbage collection pressure - Less predictable memory usage</p>"},{"location":"disruptor/performance/#decision-matrix","title":"Decision Matrix","text":"<p>Use this matrix to choose the right implementation:</p> Requirement Recommended Approach Sub-microsecond latency DisruptorNode Shared state between handlers DisruptorNode Event ordering critical DisruptorNode Independent handlers, CPU-bound Plain Node Maximum parallel throughput Plain Node Simple, maintainable code DisruptorNode Financial trading system DisruptorNode Real-time analytics DisruptorNode Batch processing pipeline Plain Node (if CPU-bound) Event sourcing DisruptorNode"},{"location":"disruptor/performance/#benchmark-code","title":"Benchmark Code","text":""},{"location":"disruptor/performance/#disruptornode-benchmark","title":"DisruptorNode Benchmark","text":"<pre><code>public class DisruptorBenchmark {\n    private static final int ITERATIONS = 10_000_000;\n\n    public static void main(String[] args) throws Exception {\n        EventDispatcher&lt;Integer&gt; intDispatcher = EventDispatcher.create();\n        EventDispatcher&lt;String&gt; stringDispatcher = EventDispatcher.create();\n\n        DisruptorNode2&lt;Integer, String&gt; node = new BenchmarkNode();\n        node.subscribe1(intDispatcher);\n        node.subscribe2(stringDispatcher);\n        node.start();\n\n        long start = System.nanoTime();\n\n        for (int i = 0; i &lt; ITERATIONS; i++) {\n            intDispatcher.dispatch(i);\n            stringDispatcher.dispatch(\"test-\" + i);\n        }\n\n        long duration = System.nanoTime() - start;\n        double opsPerSec = (ITERATIONS * 2.0) / (duration / 1_000_000_000.0);\n\n        System.out.printf(\"Throughput: %.2f ops/sec%n\", opsPerSec);\n        System.out.printf(\"Avg Latency: %.2f ns%n\", duration / (ITERATIONS * 2.0));\n    }\n\n    static class BenchmarkNode extends DisruptorNode2&lt;Integer, String&gt; {\n        @Override\n        protected void onEvent1(Integer event) {\n            // Minimal processing\n        }\n\n        @Override\n        protected void onEvent2(String event) {\n            // Minimal processing\n        }\n    }\n}\n</code></pre>"},{"location":"disruptor/performance/#conclusion","title":"Conclusion","text":"<p>Choose DisruptorNode for: - \u2705 Low-latency requirements - \u2705 High-throughput event streams - \u2705 Shared state scenarios - \u2705 Ordered event processing - \u2705 Simpler, safer code</p> <p>Choose Plain Node for: - \u2705 Truly independent handlers - \u2705 CPU-bound, parallelizable work - \u2705 Maximum multi-core utilization - \u2705 When thread-safety is not a concern</p> <p>For most applications, DisruptorNode is the better choice due to its superior latency characteristics, simpler programming model, and excellent throughput for typical event processing workloads.</p>"},{"location":"disruptor/performance/#further-reading","title":"Further Reading","text":"<ul> <li>LMAX Disruptor Overview</li> <li>Conduit Framework Guide</li> <li>Official Disruptor Performance Tests</li> </ul>"},{"location":"fx/test/","title":"Test","text":"<p>this is fx</p>"},{"location":"java/","title":"Java Development","text":"<p>Welcome to Java development documentation covering memory management, concurrency patterns, and threading best practices.</p>"},{"location":"java/#overview","title":"Overview","text":"<p>This section provides comprehensive coverage of Java fundamentals and advanced topics, with particular focus on memory management and concurrent programming patterns essential for high-performance applications.</p>"},{"location":"java/#core-topics","title":"Core Topics","text":""},{"location":"java/#memory-management","title":"Memory Management","text":"<ul> <li>Stack vs Heap Memory - Understanding Java's memory model and allocation patterns</li> </ul>"},{"location":"java/#threading-concurrency","title":"Threading &amp; Concurrency","text":"<ul> <li>Threading Guide - Complete guide to Java threading concepts and patterns</li> <li>Visibility Issues - Understanding memory visibility in multi-threaded applications</li> <li>Atomicity Issues - Ensuring atomic operations in concurrent code</li> <li>Ordering Issues - Memory ordering and synchronization</li> <li>Volatile Keyword - Understanding volatile and its proper usage</li> </ul>"},{"location":"java/#threading-use-cases","title":"Threading Use Cases","text":"<ul> <li>Blocking Tasks - Handling I/O-bound operations with threads</li> <li>CPU-Intensive Tasks - Optimizing compute-heavy workloads  </li> <li>Small, Fast Tasks - High-volume, low-latency task processing</li> </ul>"},{"location":"java/#application-lifecycle","title":"Application Lifecycle","text":"<ul> <li>Shutdown Mechanisms - Proper application shutdown and resource cleanup</li> </ul>"},{"location":"java/#getting-started","title":"Getting Started","text":"<p>New to Java Threading?</p> <p>Start with the Threading Guide to understand fundamental concepts, then explore specific use cases based on your application needs.</p>"},{"location":"java/#learning-path","title":"Learning Path","text":"<ol> <li>Memory Fundamentals - Understand Stack vs Heap memory allocation</li> <li>Threading Basics - Learn core concepts from the Threading Guide</li> <li>Concurrency Issues - Study visibility, atomicity, and ordering problems</li> <li>Practical Applications - Apply knowledge to specific use cases</li> </ol>"},{"location":"java/#best-practices","title":"Best Practices","text":""},{"location":"java/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Choose appropriate threading patterns based on workload characteristics</li> <li>Understand when multiple threads help vs. hurt performance</li> <li>Proper resource management and cleanup</li> </ul>"},{"location":"java/#common-pitfalls","title":"Common Pitfalls","text":"<ul> <li>Race conditions and synchronization issues</li> <li>Memory leaks in multi-threaded applications</li> <li>Improper use of volatile and synchronization primitives</li> </ul>"},{"location":"java/#related-topics","title":"Related Topics","text":"<ul> <li>System Design - Architecture patterns for scalable systems</li> <li>KDB+ Integration - Database connectivity and performance optimization</li> <li>Spring Boot - Application framework integration</li> </ul>"},{"location":"java/#contributing","title":"Contributing","text":"<p>This documentation includes practical examples, performance benchmarks, and real-world use cases. Each section provides both theoretical background and hands-on implementation guidance.</p>"},{"location":"java/shutdown/","title":"Graceful Shutdown in Java using ShutdownSignalBarrier","text":"<p>This document explains how to use <code>ShutdownSignalBarrier</code> and <code>SigInt.register</code> for graceful shutdown in Java applications.</p>"},{"location":"java/shutdown/#purpose","title":"Purpose","text":"<p>To handle shutdown signals (like Ctrl+C) gracefully and ensure that the main thread does not terminate unexpectedly. This is commonly used in systems like Aeron, Netty, or long-running microservices.</p>"},{"location":"java/shutdown/#code-example","title":"Code Example","text":"<pre><code>import org.agrona.concurrent.ShutdownSignalBarrier;\nimport org.agrona.concurrent.SigInt;\n\nShutdownSignalBarrier barrier = new ShutdownSignalBarrier();\nSigInt.register(() -&gt; {\n    barrier.signal();\n    System.out.println(\"Signal received\");\n});\n\nbarrier.await();\nSystem.out.println(\"Main thread terminated\");\n</code></pre>"},{"location":"java/shutdown/#explanation","title":"Explanation","text":"Component Purpose <code>ShutdownSignalBarrier</code> Blocks the main thread until a shutdown signal is received <code>SigInt.register(...)</code> Registers a signal handler for SIGINT (Ctrl+C) <code>barrier.signal()</code> Unblocks the main thread <code>barrier.await()</code> Waits for the shutdown signal"},{"location":"java/shutdown/#use-cases","title":"Use Cases","text":"<ul> <li>Aeron applications</li> <li>Long-running agents or daemons</li> <li>Console-based servers</li> <li>Microservices that require proper cleanup</li> </ul>"},{"location":"java/shutdown/#summary","title":"Summary","text":"<p>This mechanism is essential to:</p> <ul> <li>Keep the application running until explicitly terminated</li> <li>Ensure clean resource release</li> <li>Avoid ungraceful shutdowns that might corrupt state or leave ports open</li> </ul>"},{"location":"java/test/","title":"Java Memory Management: Stack vs Heap","text":"<p>Understanding Java's memory model is crucial for writing efficient applications and debugging memory-related issues.</p>"},{"location":"java/test/#stack","title":"Stack","text":"<ul> <li>Purpose: Stores method call frames, local variables, and references.</li> <li>Scope: Thread-local (each thread has its own stack).</li> <li>Speed: Very fast (LIFO access).</li> <li>Memory Management: Automatically freed after method execution.</li> <li>Lifetime: Limited to the duration of the method.</li> <li>Garbage Collected?: No.</li> <li>Common Error: <code>StackOverflowError</code> for deep recursion.</li> </ul> <pre><code>void method() {\n    int x = 10;         // x is stored on the stack\n    String s = \"hi\";    // reference is on the stack; \"hi\" is in the string pool\n}\n</code></pre>"},{"location":"java/test/#heap","title":"Heap","text":"<ul> <li>Purpose: Stores all Java objects and arrays.</li> <li>Scope: Shared memory, accessible by all threads.</li> <li>Speed: Slower than stack (due to GC and dynamic allocation).</li> <li>Memory Management: Managed by the Garbage Collector.</li> <li>Lifetime: Until no longer referenced.</li> <li>Garbage Collected?: Yes.</li> <li>Common Error: <code>OutOfMemoryError</code> when heap is exhausted.</li> </ul> <pre><code>String s = new String(\"hi\"); // a new object is created in the heap\n</code></pre>"},{"location":"java/test/#comparison-table","title":"Comparison Table","text":"Feature Stack Heap Stores Primitives, refs, call frames Objects, arrays Scope Per-thread Shared across threads Speed Fast Slower GC-managed No Yes Lifetime Until method exits Until dereferenced Common Errors StackOverflowError OutOfMemoryError"},{"location":"java/test/#summary","title":"Summary","text":"<ul> <li>Use stack for fast-access local data inside methods.</li> <li>Use heap for objects and data that must persist beyond method calls.</li> </ul>"},{"location":"java/volatile/","title":"Java <code>volatile</code>, Thread Visibility, and Atomicity","text":"<p>In multithreaded programming, it's important to understand two key concepts: visibility and atomicity.</p>"},{"location":"java/volatile/#volatile-and-thread-visibility","title":"<code>volatile</code> and Thread Visibility","text":""},{"location":"java/volatile/#what-is-visibility","title":"What is Visibility?","text":"<p>Visibility means that when one thread modifies a variable, other threads see the updated value.</p> <p>By default, the JVM and CPU may cache values in registers or CPU cache, so one thread might not immediately see changes made by another.</p>"},{"location":"java/volatile/#how-volatile-helps","title":"How <code>volatile</code> Helps","text":"<p>The <code>volatile</code> keyword tells the JVM: - Always read/write the variable directly from/to main memory - Do not cache the value in registers or thread-local caches</p>"},{"location":"java/volatile/#example","title":"Example:","text":"<pre><code>volatile boolean running = true;\n\nThread t = new Thread(() -&gt; {\n    while (running) {\n        // Wait for shutdown\n    }\n});\nt.start();\n\nThread.sleep(1000);\nrunning = false; // This change is immediately visible to thread t\n</code></pre> <p>Without <code>volatile</code>, <code>t</code> might keep running forever because it might never see <code>running = false</code>.</p>"},{"location":"java/volatile/#volatile-does-not-guarantee-atomicity","title":"<code>volatile</code> Does NOT Guarantee Atomicity","text":""},{"location":"java/volatile/#what-is-atomicity","title":"\u2753 What is Atomicity?","text":"<p>Atomicity means that a compound operation (like <code>count++</code>) executes as one indivisible step \u2014 no other thread can observe it in a halfway state.</p>"},{"location":"java/volatile/#volatile-doesnt-help-with-this","title":"\u274c <code>volatile</code> Doesn't Help with This:","text":"<pre><code>volatile int count = 0;\n\npublic void increment() {\n    count++; // NOT atomic!\n}\n</code></pre> <p>This actually performs: 1. Read <code>count</code> 2. Increment it 3. Write it back</p> <p>Multiple threads may read the same value before any writes complete, causing lost updates.</p>"},{"location":"java/volatile/#use-atomicinteger-for-atomicity","title":"Use <code>AtomicInteger</code> for Atomicity:","text":"<pre><code>AtomicInteger count = new AtomicInteger(0);\n\npublic void increment() {\n    count.incrementAndGet(); // Atomic and visible\n}\n</code></pre> <p><code>AtomicInteger</code> uses low-level CPU instructions (like CAS) to ensure the operation is thread-safe and atomic.</p>"},{"location":"java/volatile/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Feature <code>volatile</code> <code>AtomicInteger</code> Visibility Yes Yes Atomicity \u274c No Yes Use case State flags Counters, increments"},{"location":"java/volatile/#conclusion","title":"Conclusion","text":"<ul> <li>Use <code>volatile</code> for simple state flags between threads (like shutdown signals).</li> <li>Use <code>AtomicInteger</code> or synchronization for compound or critical updates.</li> <li>Understanding both visibility and atomicity is essential for writing correct concurrent code in Java.</li> </ul>"},{"location":"java/thread/","title":"Java Threading Guide","text":"<p>This guide covers Java threading concepts, when to use multiple threads, and common patterns for concurrent programming.</p>"},{"location":"java/thread/#rule-of-thumb","title":"Rule of Thumb","text":"<p>Use multiple threads when work can be done independently and in parallel.</p> <p>multiple threads can make things worse due to overhead or race conditions.</p> Use Case Problem with 1 Thread Why Multiple Threads Help Blocking I/O or UI Program freezes while waiting Other threads keep things running CPU-intensive task Only 1 core is used Multiple cores finish job faster Many small fast tasks One thread processes them slowly Pool of threads increases task throughput <p>the 3 use cases show the necessary of using multiple threads, then why need to use aeron (single service, single machine, mutltuple agents in different threads).</p> <p>this the different topic. please refer to aeron topic (Aeron): even different threads, still use aeron agents on different threads.</p> <p>ChatGpt Link: Aeron Single vs Multi-threading</p>"},{"location":"java/thread/CPU-Intensive-task/","title":"Use cases - CPU-Intensive Tasks","text":""},{"location":"java/thread/CPU-Intensive-task/#whats-the-problem","title":"What's the problem?","text":"<p>One thread = one core. If your task is heavy (e.g., calculating 1 million primes), the thread will use one CPU core only.</p>"},{"location":"java/thread/CPU-Intensive-task/#single-threaded-issue","title":"Single-threaded issue:","text":"<p>Even if you have 8 CPU cores, you're only using 1. Wasteful.</p>"},{"location":"java/thread/CPU-Intensive-task/#multi-threaded-solution","title":"Multi-threaded solution:","text":"<p>Split the work into chunks, run each on a separate thread. Parallelism = much faster.</p>"},{"location":"java/thread/CPU-Intensive-task/#example-prime-number-calculator","title":"Example: Prime number calculator","text":"<ol> <li>1 million numbers \u2192 find primes.</li> <li>Split into 4 chunks.</li> <li>Use 4 threads \u2192 4 CPU cores at once.</li> </ol> <p>this can reduce total runtime because 4 cores are working simultaneously.</p> <pre><code>// Each thread works on a chunk\nExecutorService pool = Executors.newFixedThreadPool(4);\nfor (int i = 0; i &lt; 4; i++) {\n    pool.submit(() -&gt; calculatePrimes(...));\n}\n</code></pre>"},{"location":"java/thread/atomicity/","title":"issue-atomicity","text":"Problem Example (Without volatile)with AtomicInteger <pre><code>@Slf4j\npublic class AtomicityIssue {\n    static volatile int count = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        Runnable task = () -&gt; {\n            for (int i = 0; i &lt; 10_000; i++) {\n                count++; // \u274c not atomic\n            }\n        };\n\n        Thread t1 = new Thread(task, \"T1\");\n        Thread t2 = new Thread(task, \"T2\");\n\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n\n        log.info(\"Final count = {}\", count);\n    }\n}\n</code></pre> <p> Because count++ is three operations under the hood:</p> <ul> <li>Read count</li> <li>Add 1</li> <li>Write result back</li> </ul> <p>If two threads do it at the same time, they can both read the same value and overwrite each other \u2192 lost updates.</p> <pre><code>@Slf4j\npublic class AtomicityIssue {\n    static AtomicInteger count = new AtomicInteger(0);\n\n    public static void main(String[] args) throws InterruptedException {\n        Runnable task = () -&gt; {\n            for (int i = 0; i &lt; 10_000; i++) {\n                count.incrementAndGet(); // \u2705 atomic\n            }\n        };\n\n        Thread t1 = new Thread(task, \"T1\");\n        Thread t2 = new Thread(task, \"T2\");\n\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n\n        log.info(\"Final count = {}\", count.get());\n    }\n}\n</code></pre> <p> Always prints Final count = 20000 because AtomicInteger.incrementAndGet() is thread-safe.</p>"},{"location":"java/thread/block-task/","title":"Use cases - Blocking Tasks (e.g., UI, I/O)","text":""},{"location":"java/thread/block-task/#whats-the-problem","title":"What's the problem?","text":"<p>When a thread waits for something (like reading from disk, getting user input, or waiting for a network response), it does nothing during that time.</p>"},{"location":"java/thread/block-task/#single-threaded-issue","title":"Single-threaded issue:","text":"<p>If you're using only one thread, your program halts and can't do anything else while waiting.</p>"},{"location":"java/thread/block-task/#multi-threaded-solution","title":"Multi-threaded solution:","text":"<p>Put the blocking task on a separate thread. The main thread can continue running, updating UI, or processing other events.</p>"},{"location":"java/thread/block-task/#example-chat-app-with-file-upload","title":"Example: Chat app with file upload","text":"<ol> <li>You click \"Upload file\".</li> <li>Upload takes 10 seconds due to network.</li> <li>Without threads, the entire UI freezes for 10 seconds (annoying).</li> <li>With threads, the UI is responsive while the file uploads in background.</li> </ol> <pre><code>// Good use of thread to handle blocking I/O\nnew Thread(() -&gt; {\n    uploadFile(); // simulate 10-second blocking task\n}).start();\n</code></pre>"},{"location":"java/thread/ordering/","title":"issue-ordering","text":"<p>The ordering problem in multithreaded programming can be caused by:</p> Due to single threadDue to different threads <p>Modern compilers and CPUs may reorder instructions for performance as long as the result is the same from the perspective of that single thread.</p> <p>\ud83d\udd38 But this can break correctness in multithreaded scenarios.</p> <pre><code>int x = 0;\nboolean flag = false;\n\n// Thread 1\nx = 42;           // Step 1\nflag = true;      // Step 2 (might be reordered before Step 1)\n\n// Thread 2\nif (flag) {\n    System.out.println(x); // May print 0!\n}\n</code></pre> <p>Because the compiler/CPU might reorder setting flag = true before x = 42, <code>Thread 2</code> might see flag == true but read an old value of x.</p> <p>Even if the instructions are ordered correctly in each thread, if there\u2019s no proper synchronization (e.g., volatile, locks, atomic ops), Thread 2 may see stale or reordered results due to:</p> <ul> <li>CPU caches</li> <li>Memory model differences</li> <li>Write buffers not flushed</li> </ul>"},{"location":"java/thread/ordering/#java-memory-model-jmm","title":"Java Memory Model (JMM)","text":"<p>The Java Memory Model explicitly allows such reordering unless:</p> <ul> <li>use volatile</li> <li>synchronize (synchronized, Lock)</li> <li>use atomic classes (AtomicInteger, etc.)</li> </ul> <p>These establish happens-before relationships that:</p> <ul> <li>\u2705 Prevent reordering</li> <li>\u2705 Guarantee visibility</li> </ul>"},{"location":"java/thread/small-fast-task/","title":"Use cases - Small, Fast Tasks (High Volume)","text":""},{"location":"java/thread/small-fast-task/#whats-the-problem","title":"What's the problem?","text":"<p>If you do 1 million tiny tasks one by one, you underutilize your CPU.</p>"},{"location":"java/thread/small-fast-task/#single-threaded-issue","title":"Single-threaded issue:","text":"<p>One thread does all tasks \u2192 slow throughput.</p>"},{"location":"java/thread/small-fast-task/#multi-threaded-solution","title":"Multi-threaded solution:","text":"<p>Create a thread pool that processes many tasks in parallel. This increases throughput dramatically.</p>"},{"location":"java/thread/small-fast-task/#example-prime-number-calculator","title":"Example: Prime number calculator","text":"<ol> <li>Each hash takes ~1 microsecond.</li> <li>Doing sequentially = slow.</li> <li>Spread across 8 threads \u2192 process in parallel.</li> </ol> <p>this can finish the batch faster because many threads handle many tasks at once.</p> <pre><code>ExecutorService pool = Executors.newFixedThreadPool(8);\nfor (int i = 0; i &lt; 1_000_000; i++) {\n    pool.submit(() -&gt; hash(UUID.randomUUID()));\n}\n</code></pre>"},{"location":"java/thread/visibility/","title":"issue-visibility","text":"Problem Example (Without volatile)with volatile <pre><code>    @Slf4j\n    public class Main {\n        static boolean running = true;\n\n        public static void main(String[] args) throws InterruptedException {\n            Thread t = new Thread(() -&gt; {\n                while (running) {\n                    // do nothing\n                }\n                log.info(\"Thread stopped.\");\n            });\n\n            t.start();\n            Thread.sleep(1000);\n            running = false;\n            log.info(\"Main thread changed flag.\");\n        }\n    }\n</code></pre> <p> Expected Problem: <code>t</code> may never stop, because it doesn't see running = false.</p> <pre><code>@Slf4j\npublic class Main {\n    static volatile boolean running = true;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -&gt; {\n            while (running) {\n                // do nothing\n            }\n            log.info(\"Thread stopped.\");\n        });\n\n        t.start();\n        Thread.sleep(1000);\n        running = false;\n        log.info(\"Main thread changed flag.\");\n    }\n}\n</code></pre> <p> Now it stops correctly \u2014 the change to running is visible to the thread <code>t</code>.</p>"},{"location":"kdb/","title":"KDB+ Documentation","text":"<p>Welcome to KDB+ (Q) documentation covering setup, operations, and integration examples for this high-performance time-series database.</p>"},{"location":"kdb/#overview","title":"Overview","text":"<p>KDB+ is a high-performance column-oriented database with a built-in expressive query and programming language called Q. It's particularly well-suited for financial time-series data and real-time analytics.</p>"},{"location":"kdb/#getting-started","title":"Getting Started","text":""},{"location":"kdb/#prerequisites","title":"Prerequisites","text":"<ul> <li>KDB+ installation (see setup guide)</li> <li>Basic understanding of columnar databases</li> <li>Familiarity with functional programming concepts</li> </ul>"},{"location":"kdb/#quick-start","title":"Quick Start","text":"<ol> <li>Setup KDB+ on M3 - Installation guide for ARM-based Macs</li> <li>Connect manually - Basic connection methods</li> <li>Simple Demo - Working examples and tutorials</li> </ol>"},{"location":"kdb/#core-concepts","title":"Core Concepts","text":""},{"location":"kdb/#essential-commands","title":"Essential Commands","text":"<pre><code>// List all tables in root namespace\nq)tables `.\n\n// Check dictionary structure\nq).u.w  // tick subscription dictionary\n</code></pre>"},{"location":"kdb/#table-operations","title":"Table Operations","text":""},{"location":"kdb/#creating-tables","title":"Creating Tables","text":"<pre><code>// Define stock table schema\nstocks:([] time:`timestamp$(); sym:`symbol$(); price:`float$())\n\n// Insert single record\n`stocks insert (.z.p; `AAPL; 170.11)\n\n// Upsert with structured data\nrow: flip `time`sym`price! (enlist .z.p; enlist `AAPL; enlist 189.3)\nstocks upsert row\n</code></pre>"},{"location":"kdb/#integration-patterns","title":"Integration Patterns","text":""},{"location":"kdb/#java-integration","title":"Java Integration","text":"<p>For Java applications connecting to KDB+:</p>"},{"location":"kdb/#reading-data","title":"Reading Data","text":"<pre><code>private static void printStocks(c c) throws c.KException, IOException {\n    // KDB+ query: select from stocks where time &lt; .z.p, sorted by time descending\n    String query = \"xdesc[`time] select from stocks where time &lt; .z.p\";\n\n    // Send query and receive result\n    Object result_kdb = c.k(query);\n\n    Flip table = (Flip) result_kdb;\n    String[] columnNames = table.x;\n    Object[] columnData = table.y;\n\n    int rowCount = Array.getLength(columnData[0]);\n\n    for (int i = 0; i &lt; rowCount; i++) {\n        StringBuilder row = new StringBuilder();\n        for (int j = 0; j &lt; columnNames.length; j++) {\n            Object col = columnData[j];\n            Object value = Array.get(col, i);\n            row.append(columnNames[j]).append(\"=\").append(value).append(\" \");\n        }\n        System.out.println(row.toString());\n    }\n}\n</code></pre>"},{"location":"kdb/#writing-data","title":"Writing Data","text":"<pre><code>private static void insertStock(c c, String sym, double price) throws c.KException, IOException {\n    String query = String.format(\"`stocks insert (.z.p; `%s; %f)\", sym, price);\n    c.ks(query);\n}\n</code></pre>"},{"location":"kdb/#real-time-data-streaming","title":"Real-time Data Streaming","text":""},{"location":"kdb/#q-process-setup","title":"Q Process Setup","text":"<pre><code># Start Q process with port\nq -p 1234\n</code></pre> <pre><code>// Define stream schema\nstocks:([] time:`timestamp$(); sym:`symbol$(); price:`float$());\n\n// Load tick utilities\n\\l tick/u.q\n.u.init[]\n\n// Memory management - keep only last minute of data\n.z.ts:{ `stocks set select from stocks where time &gt; .z.p - 00:01:00.000 };\n\\t 1000  // Execute every second\n</code></pre>"},{"location":"kdb/#dashboard-integration","title":"Dashboard Integration","text":"<p>For KX Dashboard connections:</p> <ol> <li>Data Source Configuration: Use <code>DataSource-&gt;kdb+/q</code></li> <li>Query for latest data:    <pre><code>`time xdesc select from stocks where time &lt; .z.p\n</code></pre></li> <li>Subscription Settings:</li> <li>Polling: Enabled</li> <li>Force Reset: Enabled  </li> <li>Interval: 1s</li> <li>Key: Row Num</li> </ol>"},{"location":"kdb/#advanced-topics","title":"Advanced Topics","text":""},{"location":"kdb/#memory-management","title":"Memory Management","text":"<pre><code>// Keep only latest 10 records\n.z.ts:{ `stocks set select from stocks where i &gt; (count stocks) - 10 }\n\n// Time-based retention (10 minutes)\n.z.ts:{ `stocks set delete from stocks where time &lt; .z.p - 00:10:00.000 }\n</code></pre>"},{"location":"kdb/#tick-integration","title":"Tick Integration","text":"<pre><code>// Initialize tick publishing\n\\l tick/u.q\n.u.init[]\n\n// Define update function for dashboards\n.u.upd:{[table; data] insert[table; flip data]; .u.pub[table; flip data];}\n.u.snap:{stocks}\n\n// Publish updates every second\n\\t 1000\n.z.ts:{ .u.pub[`stocks; .u.snap[`stocks]] }\n</code></pre>"},{"location":"kdb/#additional-resources","title":"Additional Resources","text":""},{"location":"kdb/#documentation-links","title":"Documentation Links","text":"<ul> <li>KX Dashboard Getting Started</li> <li>KX Developer Guide</li> <li>KDB Java API Guide</li> </ul>"},{"location":"kdb/#related-topics","title":"Related Topics","text":"<ul> <li>Dashboard Configuration - KX Dashboard data source setup</li> <li>Connection Examples - Manual connection methods</li> <li>M3 Setup Guide - Installation on ARM-based systems</li> </ul> <p>Performance Considerations</p> <p>KDB+ excels at time-series operations. Design your schemas and queries with columnar access patterns in mind for optimal performance.</p>"},{"location":"kdb/connect/","title":"connect to kdb+ manually","text":"<p>This guide helps you verify that your KDB+ instance is running and accepting remote connections \u2014 useful for Java integration, KX Dashboards, etc.</p>"},{"location":"kdb/connect/#start-a-kdb-process-listening-on-a-port","title":"Start a KDB+ Process Listening on a Port","text":"<p>Open a terminal and run:</p> <pre><code>q -p 5000\n</code></pre> <p>This starts KDB+ (q process) and listens for incoming IPC connections on port 5000.</p>"},{"location":"kdb/connect/#open-a-second-terminal","title":"Open a Second Terminal","text":"<p>Start another q session (acts like a client):</p> <pre><code>q\n</code></pre>"},{"location":"kdb/connect/#connect-to-the-first-kdb-process","title":"Connect to the First KDB+ Process","text":"<p>In the second q session:</p> <pre><code>h: hopen `:localhost:5000\n</code></pre> <p>This opens a handle <code>h</code> to the KDB+ server running on port 5000.</p>"},{"location":"kdb/connect/#send-a-test-command","title":"Send a Test Command","text":"<p>Send a command to the remote session:</p> <pre><code>h \"1+1\"\n</code></pre> <p>You should see the result in the Second q process:</p> <pre><code>2\n</code></pre>"},{"location":"kdb/connect/#result","title":"Result","text":"<p>If the command returns <code>2</code>, your KDB+ server is reachable and working.</p> <p>You can now connect to it from Java or any IPC-compatible client using: <pre><code>new Connection(\"localhost\", 5000);\n</code></pre></p>"},{"location":"kdb/kxDashboard/","title":"connect to kdb+ manually","text":"<ol> <li>terminal: q dash.q -p 10001 -u 1</li> </ol>"},{"location":"kdb/kxDashboard/#csv-as-the-data-source","title":"CSV as the data source","text":"<ol> <li>terminal: q -p 5050</li> <li>terminal: q)PivotData: (\"zffffj\"; enlist \",\") 0: `:~/Documents/q/data/EURTRY.csv</li> <li>terminal: q)PivotData</li> <li>web kx dashboard to create a new connection with port 5050</li> <li>now able to use the PivotData as the data source</li> </ol>"},{"location":"kdb/kxDashboard/#stream-real-time-data","title":"Stream Real Time Data","text":""},{"location":"kdb/setup/","title":"KDB+ Setup on M3 (Arm64)","text":""},{"location":"kdb/setup/#issue-with-m3-architecture","title":"Issue with M3 Architecture","text":"<p>KDB+ can run on Arm64, but it causes integration issues with other tools like KDB Developer.</p>"},{"location":"kdb/setup/#setup-steps","title":"Setup Steps","text":""},{"location":"kdb/setup/#1-open-terminal-with-rosetta-intelx86_64-mode","title":"1. Open Terminal with Rosetta (Intel/x86_64 mode)","text":"<pre><code>arch -x86_64 /System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal &amp;\n</code></pre>"},{"location":"kdb/setup/#2-build-openssl-11-manually","title":"2. Build OpenSSL 1.1 Manually","text":"<p>Homebrew has disabled OpenSSL 1.1, so it needs to be built manually.</p> <p>Important</p> <p>Make sure the terminal is opened with Rosetta (<code>uname -m</code> should return <code>x86_64</code>), otherwise you'll encounter issues when installing KDB Developer.</p>"},{"location":"kdb/setup/#3-install-openssl-11","title":"3. Install OpenSSL 1.1","text":"<p>Download and build OpenSSL 1.1.1w:</p> <pre><code>mkdir -p ~/dev/openssl-1.1-x86\ncd ~/dev/openssl-1.1-x86\n\ncurl -LO https://www.openssl.org/source/openssl-1.1.1w.tar.gz\ntar -xzf openssl-1.1.1w.tar.gz\ncd openssl-1.1.1w\n\n./Configure darwin64-x86_64-cc --prefix=$HOME/openssl-1.1-x86\nmake -j$(sysctl -n hw.logicalcpu)\nmake install\n</code></pre> <p>Create symbolic links:</p> <pre><code>sudo mkdir -p /usr/local/opt/openssl@1.1/lib\n\nsudo ln -sf ~/openssl-1.1-x86/lib/libssl.1.1.dylib /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\nsudo ln -sf ~/openssl-1.1-x86/lib/libcrypto.1.1.dylib /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib\n</code></pre> <p>Verify the installation:</p> <pre><code>file /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\n# Should output: Mach-O 64-bit dynamically linked shared library x86_64\n</code></pre>"},{"location":"kdb/setup/#4-remove-quarantine-from-kx-developer-files","title":"4. Remove Quarantine from KX Developer Files","text":"<p>Remove quarantine attributes from all .so files in the KX Developer folder:</p> <pre><code>find /path/to/kx-developer -name \"*.so\" -exec xattr -d com.apple.quarantine {} +\n</code></pre>"},{"location":"kdb/simpleDemo/","title":"connect to kdb+ manually","text":"<p>This guide helps you verify that your KDB+ instance is running and accepting remote connections \u2014 useful for Java integration, KX Dashboards, etc.</p>"},{"location":"kdb/simpleDemo/#start-a-kdb-process-listening-on-a-port","title":"Start a KDB+ Process Listening on a Port","text":"<p>Open a terminal and run:</p> <pre><code>q -p 5000\n</code></pre> <p>This starts KDB+ and listens for incoming IPC connections on port 5000.</p>"},{"location":"kdb/simpleDemo/#open-a-second-terminal","title":"Open a Second Terminal","text":"<p>Start another q session (acts like a client):</p> <pre><code>q\n</code></pre>"},{"location":"kdb/simpleDemo/#connect-to-the-first-kdb-process","title":"Connect to the First KDB+ Process","text":"<p>In the second q session:</p> <pre><code>h: hopen `:localhost:5000\n</code></pre> <p>This opens a handle <code>h</code> to the KDB+ server running on port 5000.</p>"},{"location":"kdb/simpleDemo/#send-a-test-command","title":"Send a Test Command","text":"<p>Send a command to the remote session:</p> <pre><code>h \"1+1\"\n</code></pre> <p>You should see the result:</p> <pre><code>2\n</code></pre>"},{"location":"kdb/simpleDemo/#result","title":"Result","text":"<p>If the command returns <code>2</code>, your KDB+ server is reachable and working.</p> <p>You can now connect to it from Java or any IPC-compatible client using: <pre><code>new Connection(\"localhost\", 5000);\n</code></pre></p>"},{"location":"linux/","title":"Linux Operations","text":"<p>Welcome to Linux operations documentation covering command reference and system administration.</p>"},{"location":"linux/#overview","title":"Overview","text":"<p>This section provides practical Linux command references, system administration guides, and operational procedures for managing Linux-based development and production environments.</p>"},{"location":"linux/#available-resources","title":"Available Resources","text":""},{"location":"linux/#command-reference","title":"Command Reference","text":"<ul> <li>Linux Cheatsheet - Essential Linux commands and operations reference</li> </ul>"},{"location":"linux/#core-topics","title":"Core Topics","text":""},{"location":"linux/#system-administration","title":"System Administration","text":"<ul> <li>Command-line operations and navigation</li> <li>File and directory management</li> <li>Process monitoring and management</li> <li>Network configuration and troubleshooting</li> </ul>"},{"location":"linux/#development-environment","title":"Development Environment","text":"<ul> <li>Shell scripting and automation</li> <li>Package management and installation</li> <li>Environment variable configuration</li> <li>Service management and systemd</li> </ul>"},{"location":"linux/#getting-started","title":"Getting Started","text":"<p>New to Linux?</p> <p>Start with the Linux Cheatsheet to familiarize yourself with essential commands and operations.</p>"},{"location":"linux/#learning-path","title":"Learning Path","text":"<ol> <li>Basic Commands - Master file operations, navigation, and text processing</li> <li>Process Management - Learn to monitor and control running processes</li> <li>Network Operations - Understand networking commands and troubleshooting</li> <li>System Administration - Advanced topics for managing Linux systems</li> </ol>"},{"location":"linux/#common-use-cases","title":"Common Use Cases","text":""},{"location":"linux/#development-workflow","title":"Development Workflow","text":"<ul> <li>Setting up development environments</li> <li>Managing dependencies and packages</li> <li>Automating build and deployment processes</li> <li>Debugging and troubleshooting applications</li> </ul>"},{"location":"linux/#server-management","title":"Server Management","text":"<ul> <li>Configuring and maintaining production servers</li> <li>Monitoring system performance and resources</li> <li>Managing user accounts and permissions</li> <li>Implementing security best practices</li> </ul>"},{"location":"linux/#devops-integration","title":"DevOps Integration","text":"<ul> <li>Container orchestration and management</li> <li>CI/CD pipeline configuration</li> <li>Infrastructure as code implementation</li> <li>Monitoring and logging setup</li> </ul>"},{"location":"linux/#related-topics","title":"Related Topics","text":"<ul> <li>Setup Guides - Environment configuration and tool installation</li> <li>KDB+ Setup - Database installation on Linux systems</li> <li>SSH Configuration - Remote access and security</li> </ul>"},{"location":"linux/#contributing","title":"Contributing","text":"<p>Linux operations documentation is continuously updated with new commands, procedures, and best practices. Each section includes practical examples and troubleshooting guidance for real-world scenarios.</p>"},{"location":"linux/cheatsheet/","title":"cheatsheet","text":""},{"location":"linux/cheatsheet/#find-which-process-is-using-a-specific-port-8080","title":"Find which process is using a specific port 8080:","text":"<pre><code>lsof -i :8080\n</code></pre>"},{"location":"linux/cheatsheet/#lists-processes-listening-on-tcp-port-8082-showing-clean-output","title":"lists processes listening on TCP port 8082, showing clean output","text":"<pre><code>lsof -nP -iTCP:8080 -sTCP:LISTEN\n</code></pre> Option What It Does <code>lsof</code> Lists open files (including network sockets) <code>-n</code> Don\u2019t resolve IPs to hostnames (faster, no DNS delay) <code>-P</code> Don\u2019t convert port numbers to names (e.g. show <code>8082</code> instead of <code>us-cli</code>) <code>-iTCP:8082</code> Filter: only show TCP connections on port 8082 <code>-sTCP:LISTEN</code> Filter: only show listening sockets (not established connections)"},{"location":"linux/cheatsheet/#detailed-information-about-the-process-with-pid-using-wide-output-no-truncation","title":"detailed information about the process with PID ( using wide output (no truncation).)","text":"<pre><code>ps -p 123 -ww\n</code></pre> <p><code>-ww</code>:  Show full command line without cutting off arguments (double w means no truncation at all)</p>"},{"location":"linux/cheatsheet/#lists-all-running-java-processes-with-their-pid-and-main-class-or-jar-file","title":"lists all running Java processes with their PID and main class or jar file.","text":"<pre><code>jps -l\n</code></pre>"},{"location":"linux/cheatsheet/#shows-which-ipport-the-java-processpid12345-is-listening-on","title":"shows which IP/port the Java process(pid=12345) is listening on","text":"<pre><code>lsof -nP -p 12345 -iTCP -sTCP:LISTEN\n</code></pre>"},{"location":"linux/cheatsheet/#list-all-open-network-ports-java-or-not","title":"List all open network ports (Java or not)","text":"<pre><code>lsof -nP -iTCP -sTCP:LISTEN\nor \nnetstat -anp tcp\n</code></pre>"},{"location":"linux/cheatsheet/#show-both-tcp-andor-udp","title":"show both TCP and/or UDP","text":"<pre><code>lsof -i\nlsof -iTCP\nlsof -iUDP\n</code></pre>"},{"location":"linux/cheatsheet/#check-udp-connectivity-via-nc-netcat-see-the-message-udp-is-open","title":"Check UDP Connectivity via nc (netcat):  see the message, UDP is open.","text":"<pre><code>listener: listen on my port 1234\nnc -u -l -p 1234\n\npublisher: send msg to listener ip:port\necho \"test\" | nc -u &lt;listener_public_ip&gt; 1234\n</code></pre>"},{"location":"linux/cheatsheet/#check-what-serviceprocesstask-are-using-the-port","title":"Check what service/process/task are using the port","text":"<pre><code>ps aux | grep PID\n</code></pre>"},{"location":"mkDocs/admonitions/","title":"Admonitions","text":"<p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"mkDocs/code-example/","title":"Code example","text":"<p>An example of a codeblock for Python and JavaScript</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage test\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> code-examples.md<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"mkDocs/content-tabs/","title":"Content tabs","text":""},{"location":"mkDocs/content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"mkDocs/content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered listPythonJavaScript <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol> <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre> <p>.z.ts:{  `stocks set select from stocks where i &gt; (count  stocks) - 1000 }</p>"},{"location":"mkDocs/diagram-examples/","title":"Diagram Examples","text":""},{"location":"mkDocs/diagram-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"mkDocs/diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"setup/","title":"Setup Guides","text":"<p>Welcome to setup and configuration guides covering development environment setup for various tools and platforms.</p>"},{"location":"setup/#overview","title":"Overview","text":"<p>This section provides step-by-step setup instructions for development tools, SSH configuration, and environment management across different platforms.</p>"},{"location":"setup/#available-guides","title":"Available Guides","text":""},{"location":"setup/#python-environment","title":"Python Environment","text":"<ul> <li>Virtual Environment Setup (macOS) - Setting up Python virtual environments on macOS</li> </ul>"},{"location":"setup/#ssh-configuration","title":"SSH Configuration","text":"<ul> <li>GitHub SSH Setup - Configuring SSH keys for GitHub authentication</li> <li>Linux Server SSH - SSH configuration for remote Linux server access</li> </ul>"},{"location":"setup/#getting-started","title":"Getting Started","text":"<p>New Development Environment?</p> <p>Start with the Python virtual environment setup if you're working with Python projects, or SSH configuration if you need secure remote access.</p>"},{"location":"setup/#setup-workflow","title":"Setup Workflow","text":"<ol> <li>Python Development - Configure virtual environments for project isolation</li> <li>GitHub Access - Set up SSH keys for seamless repository access  </li> <li>Remote Servers - Configure SSH access to development or production servers</li> </ol>"},{"location":"setup/#best-practices","title":"Best Practices","text":""},{"location":"setup/#environment-management","title":"Environment Management","text":"<ul> <li>Use virtual environments to isolate project dependencies</li> <li>Keep development and production configurations separate</li> <li>Document environment requirements and setup steps</li> </ul>"},{"location":"setup/#ssh-security","title":"SSH Security","text":"<ul> <li>Use SSH keys instead of passwords for authentication</li> <li>Regularly rotate SSH keys for security</li> <li>Configure proper permissions for SSH key files</li> </ul>"},{"location":"setup/#version-control","title":"Version Control","text":"<ul> <li>Never commit sensitive configuration files</li> <li>Use environment variables for configuration values</li> <li>Document setup procedures for team members</li> </ul>"},{"location":"setup/#related-topics","title":"Related Topics","text":"<ul> <li>KDB+ Setup - KDB+ installation and configuration</li> <li>Spring Boot - Java application framework setup</li> <li>Productivity Tools - Development workflow optimization</li> </ul>"},{"location":"setup/#contributing","title":"Contributing","text":"<p>These setup guides are tested on macOS and Linux environments. If you encounter platform-specific issues or have additional setup scenarios, please contribute updates to keep the documentation current.</p>"},{"location":"setup/python-vertual-env/","title":"Python Version Management with pyenv","text":""},{"location":"setup/python-vertual-env/#check-python-version","title":"Check Python Version","text":"<p>To display the current Python version (e.g., Python 3.12.2 or the version set with <code>pyenv</code>):</p> <pre><code>python --version\n</code></pre>"},{"location":"setup/python-vertual-env/#list-installed-versions","title":"List Installed Versions","text":"<p>To list all installed Python versions and see which one is active (marked with <code>*</code>):</p> <pre><code>pyenv versions\n</code></pre>"},{"location":"setup/python-vertual-env/#check-active-python-environment","title":"Check Active Python Environment","text":"<p>To check which Python environment is currently active:</p> <pre><code>pyenv version\n</code></pre>"},{"location":"setup/python-vertual-env/#create-a-python-virtual-environment","title":"Create a Python Virtual Environment","text":"<p>To create a new Python virtual environment (e.g., <code>virLanggraphEnv</code> using Python 3.12.2):</p> <pre><code>pyenv virtualenv 3.12.2 virLanggraphEnv\n</code></pre>"},{"location":"setup/python-vertual-env/#activate-a-python-environment","title":"Activate a Python Environment","text":"<p>To activate a specific Python environment (e.g., <code>virLanggraphEnv</code>):</p> <pre><code>pyenv activate virLanggraphEnv\n</code></pre>"},{"location":"setup/python-vertual-env/#set-a-local-python-environment-python-version","title":"Set a Local Python Environment (.python-version)","text":"<ol> <li>The <code>pyenv local</code> command sets a directory-specific Python version by creating a <code>.python-version</code> file in the current directory.</li> <li>This ensures automatic activation of the specified Python environment whenever the directory is accessed.</li> <li>To set a specific Python environment as the local version (e.g., <code>virLanggraphEnv</code>):</li> </ol> <pre><code>pyenv local virLanggraphEnv\n</code></pre>"},{"location":"setup/python-vertual-env/#uninstall-a-python-environment","title":"Uninstall a Python Environment","text":"<p>To uninstall a specific Python environment (e.g., <code>virLanggraphEnv</code>): 1. Use pyenv virtualenv-delete if you want to be explicit that you're deleting a virtualenv 2. Use pyenv uninstall as the universal command for removing anything pyenv manages <pre><code>pyenv virtualenv-delete virLanggraphEnv\npyenv uninstall virLanggraphEnv\n</code></pre></p>"},{"location":"setup/python-vertual-env/#locate-python-and-pip","title":"Locate Python and Pip","text":""},{"location":"setup/python-vertual-env/#check-the-shim","title":"Check the Shim","text":"<p>The shim is a pointer to the actual <code>pip</code> or <code>python</code> binary, depending on the currently activated Python environment:</p> <pre><code>which pip\nwhich python\n</code></pre>"},{"location":"setup/python-vertual-env/#find-the-actual-path","title":"Find the Actual Path","text":"<p>To display the actual path to the current Python binary (not just the shim):</p> <pre><code>pyenv which pip\npyenv which python\n</code></pre>"},{"location":"setup/python-vertual-env/#example-workflow","title":"Example Workflow","text":"<p>Activate the environment and verify the <code>pip</code> path:</p> <pre><code>pyenv activate virLanggraphEnv\npyenv which pip\n</code></pre>"},{"location":"setup/ssh-github/","title":"GitHub SSH Key Management","text":""},{"location":"setup/ssh-github/#generate-an-ssh-key-for-github","title":"Generate an SSH Key for GitHub","text":"<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\" -f ~/.ssh/id_ed25519_github\n</code></pre> <ul> <li><code>-C</code> is a comment (any label, not functionally required)</li> <li><code>-f</code> specifies the filename to save the key</li> <li>Press Enter twice to skip setting a passphrase (or set one for security)</li> </ul>"},{"location":"setup/ssh-github/#add-the-public-key-to-github","title":"Add the Public Key to GitHub","text":"<pre><code>cat ~/.ssh/id_ed25519_github.pub\n</code></pre> <ol> <li>Copy the output</li> <li>Go to GitHub \u2192 Settings \u2192 SSH and GPG keys</li> <li>Click \"New SSH key\", give it a name, and paste the public key</li> </ol>"},{"location":"setup/ssh-github/#configure-ssh-to-use-the-right-key","title":"Configure SSH to Use the Right Key","text":"<p>Edit (or create) the <code>~/.ssh/config</code> file:</p> <p><pre><code>Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_github\n  IdentitiesOnly yes\n</code></pre> The <code>IdentitiesOnly yes</code> tells SSH to use only this key instead of offering every key in your agent.</p> <p>without it, it will try:</p> <ul> <li>Keys from ssh-agent</li> <li>Default files in ~/.ssh/ <ul> <li>~/.ssh/id_rsa</li> <li>~/.ssh/id_ecdsa</li> <li>~/.ssh/id_ed25519</li> <li>~/.ssh/id_dsa</li> <li>Any others added in recent OpenSSH versions</li> </ul> </li> <li>Keys listed in your ~/.ssh/config for the current Host (<code>Host github.com</code>)</li> </ul> <p>with it, SSH uses only the key you specified \u2014 no default keys, no ssh-agent keys, no surprises.</p>"},{"location":"setup/ssh-github/#test-ssh-connection-to-github","title":"Test SSH Connection to GitHub","text":"ssh -Tssh using specific key <p>this is assume I configed the ssh key correctly (using ssh-add(ssh-agent) or editing ~/.ssh/config)</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Expected result:</p> <pre><code>Hi &lt;your-username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre> <p>Use case:</p> <ul> <li>You're testing if a specific key works</li> <li>You haven\u2019t set up a config file or SSH agent</li> <li>You want a one-off manual override <pre><code>ssh -i ~/.ssh/id_ed25519_github git@github.com\n</code></pre></li> </ul> <p>Expected result:</p> <pre><code>PTY allocation request failed on channel 0\nHi &lt;your-username&gt;! You've successfully authenticated, but GitHub does not provide shell access.\nConnection to github.com closed.\n</code></pre>"},{"location":"setup/ssh-github/#use-ssh-with-git","title":"Use SSH with Git","text":"<pre><code>git clone git@github.com:your-username/your-repo.git\n</code></pre>"},{"location":"setup/ssh-github/#use-default-commit-message-template-specific-repository","title":"Use default commit message template (specific repository)","text":"<pre><code>echo \"SF:\" &gt; .mycommitmsg.txt\ngit config --local commit.template .mycommitmsg.txt\n</code></pre>"},{"location":"setup/ssh-github/#notes","title":"Notes","text":"<ul> <li>GitHub uses <code>git@github.com</code> for all SSH connections.</li> <li>SSH authentication is done via public key fingerprint, not username.</li> <li>GitHub matches the SSH key to your account during the handshake.</li> <li>You can manage multiple SSH keys by configuring <code>~/.ssh/config</code> for each host.</li> </ul>"},{"location":"setup/ssh-server/","title":"client to server by using ssh (windows version)","text":""},{"location":"setup/ssh-server/#set-up","title":"set up:","text":"<ul> <li>You (Windows) = SSH Client</li> <li>VM (Linux) = SSH Server</li> </ul>"},{"location":"setup/ssh-server/#generate-an-ssh-key-in-client","title":"Generate an SSH Key in client","text":"<pre><code>ssh-keygen -t ed25519 -C \"vm test\" -f ~/.ssh/id_ed25519_key\n</code></pre> <ul> <li><code>-C</code> is a comment (any label, not functionally required)</li> <li><code>-f</code> specifies the filename to save the key</li> <li>Press Enter twice to skip setting a passphrase (or set one for security)</li> </ul>"},{"location":"setup/ssh-server/#add-the-public-key-to-vm-server","title":"Add the Public Key to vm server","text":"<pre><code>cat ~/.ssh/id_ed25519_key.pub # in Client\n</code></pre> <ol> <li>Copy the output</li> <li>login vm server by password first (ssh -p 1234 woon@1.0.0.X)</li> <li><code>vim ~/.ssh/authorized_keys # in server</code> and paste the public key in the last entry</li> </ol>"},{"location":"setup/ssh-server/#configure-ssh-to-use-the-right-key","title":"Configure SSH to Use the Right Key","text":"<p>Edit (or create) the <code>C:\\Users\\woon\\.ssh\\config</code> file: </p> <pre><code># in Client\nHost X.0.0.X\n  User woon\n  Port 1234\n  HostName X.0.0.X\n  IdentityFile C:\\Users\\woon\\.ssh\\id_ed25519_key\n  IdentitiesOnly yes\n</code></pre>"},{"location":"setup/ssh-server/#test-ssh-connection-to-server","title":"Test SSH Connection to server","text":"<p><code>ssh X.0.0.X</code> (Host X.0.0.X in client .ssh/config) <pre><code>ssh -vvv X.0.0.X # in Client\n</code></pre></p> <p>Expected result (for the first time):</p> <pre><code>The authenticity of host '[X.0.0.X]:1234 ([X.0.0.X]:1234)' can't be established.\nED25519 key fingerprint is SHA256:abcd/efg.\nThis host key is known by the following other names/addresses:\n    C:\\Users\\woon/.ssh/known_hosts:1: [X.0.0.1]:1234\n    C:\\Users\\woon/.ssh/known_hosts:2: [X.0.0.4]:1234\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '[X.0.0.X]:1234' (ED25519) to the list of known hosts.\nConnection reset by X.0.0.X port 1234\n</code></pre> <ul> <li><code>SHA256:abcd/efg.</code> the SSH host fingerprint shown when you connect to a server is derived from the public host key files<ul> <li>To see the fingerprint for the ED25519 key      <pre><code># Each Linux system running an SSH server has its own set of host keys stored in /etc/ssh\n/etc/ssh$ ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub # in Server\n</code></pre></li> </ul> </li> <li>'This host key is known by the following other names/addresses' :  Cloned VMs Will Share Fingerprints</li> <li>a new fingerprint will be saved to your known_hosts in the windows client machine. <code>C:\\Users\\woon\\.ssh&gt;more known_hosts # in Client</code></li> </ul>"},{"location":"spring-boot/","title":"Spring Boot","text":"<p>Welcome to Spring Boot documentation covering application development, multi-module projects, and Maven integration.</p>"},{"location":"spring-boot/#overview","title":"Overview","text":"<p>Spring Boot makes it easy to create stand-alone, production-grade Spring-based applications with minimal configuration.</p>"},{"location":"spring-boot/#topics-covered","title":"Topics Covered","text":"<ul> <li>Multi-Module Maven Projects - Organizing large Spring Boot applications</li> <li>Maven Configuration - Build configuration and dependency management</li> <li>Application architecture patterns</li> <li>Configuration and profiles management</li> </ul>"},{"location":"spring-boot/#getting-started","title":"Getting Started","text":"<p>Spring Boot provides opinionated defaults that help you get started quickly while remaining highly configurable for production needs.</p>"},{"location":"spring-boot/maven/","title":"Maven","text":"<p>plugin  dependency config jar scope...</p> <p><code>&lt;pluginManagement&gt;</code> in parent, it declares plugin versions and config, but does not run the plugin in any module until it's declared in  of that module"},{"location":"spring-boot/maven/#build","title":"Build","text":"<p>In Maven, the <code>&lt;build&gt;</code> tag is used in the pom.xml to configure how the project is built, including:</p> <ul> <li>Output directories</li> <li>Final artifact name</li> <li>Plugins to use (and their configuration)</li> <li>Resources to include</li> </ul> <p><code>&lt;plugins&gt;</code> in parent</p> <ul> <li>Runs only for the parent module itself</li> <li>Child modules do not inherit these plugins or run them unless they declare their own  block"},{"location":"spring-boot/maven/#jacoco-maven-plugin","title":"jacoco-maven-plugin","text":"Goal Description Measure code coverage Tracks how much of your Java code is executed during test runs Generate coverage reports Produces HTML, XML, and CSV reports for analysis Enforce coverage rules Can fail the build if line or branch coverage is below threshold Supports unit and integration tests Works with Surefire (unit tests) and Failsafe (integration tests) <pre><code>&lt;build&gt;\n&lt;plugins&gt;\n    &lt;plugin&gt;\n    &lt;groupId&gt;org.jacoco&lt;/groupId&gt;\n    &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;0.8.11&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;!-- Prepares coverage instrumentation --&gt;\n        &lt;execution&gt;\n        &lt;id&gt;prepare-agent&lt;/id&gt;\n        &lt;goals&gt;\n            &lt;goal&gt;prepare-agent&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;/execution&gt;\n\n        &lt;!-- Generates report after tests --&gt;\n        &lt;execution&gt;\n        &lt;id&gt;report&lt;/id&gt;\n        &lt;phase&gt;prepare-package&lt;/phase&gt;\n        &lt;goals&gt;\n            &lt;goal&gt;report&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;/execution&gt;\n\n        &lt;!-- Fail build if coverage is too low --&gt;\n        &lt;execution&gt;\n        &lt;id&gt;check&lt;/id&gt;\n        &lt;goals&gt;\n            &lt;goal&gt;check&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;configuration&gt;\n            &lt;rules&gt;\n            &lt;rule&gt;\n                &lt;element&gt;BUNDLE&lt;/element&gt;\n                &lt;limits&gt;\n                &lt;limit&gt;\n                    &lt;counter&gt;LINE&lt;/counter&gt;\n                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;\n                    &lt;minimum&gt;0.80&lt;/minimum&gt;\n                &lt;/limit&gt;\n                &lt;limit&gt;\n                    &lt;counter&gt;BRANCH&lt;/counter&gt;\n                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;\n                    &lt;minimum&gt;0.70&lt;/minimum&gt;\n                &lt;/limit&gt;\n                &lt;/limits&gt;\n            &lt;/rule&gt;\n            &lt;/rules&gt;\n        &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n    &lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> <p>After running mvn test or mvn verify, reports are generated in:</p> <ul> <li>target/site/jacoco/index.html   (HTML report)</li> <li>target/site/jacoco/jacoco.xml   (XML for CI tools like SonarQube)</li> </ul> <p>Coverage Types</p> Metric Description Line % of lines executed Branch % of control structures covered Method % of methods tested Class % of classes touched"},{"location":"spring-boot/maven/#maven-checkstyle-plugin","title":"maven-checkstyle-plugin","text":"Goal Description Enforce coding standards Validates Java code against a defined style guide (e.g., Google, Sun, custom) Ensure code consistency Helps teams maintain uniform formatting and structure Catch style violations early Detects spacing, naming, import order, and other formatting issues Generate style violation reports Produces HTML and XML reports for visual inspection or CI pipelines Fail builds on violations Prevents code with style issues from passing CI/CD or being merged <p>The <code>maven-checkstyle-plugin</code> integrates Checkstyle into your Maven build to enforce Java coding standards and styles across your project.</p> <p>It helps catch:</p> <ul> <li>Improper naming conventions</li> <li>Braces, spacing, line length issues</li> <li>Unused imports or fields</li> <li>Code style violations based on rules</li> </ul> <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.3.0&lt;/version&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;validate&lt;/id&gt;\n      &lt;phase&gt;validate&lt;/phase&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;check&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n  &lt;configuration&gt;\n    &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;\n    &lt;suppressionsLocation&gt;checkstyle-suppressions.xml&lt;/suppressionsLocation&gt;\n    &lt;maxAllowedViolations&gt;0&lt;/maxAllowedViolations&gt;\n    &lt;propertyExpansion&gt;\n      &lt;subpackage&gt;com.example.project&lt;/subpackage&gt;\n      &lt;checkstyle.cache.file&gt;${project.build.directory}/checkstyle-cachefile&lt;/checkstyle.cache.file&gt;\n    &lt;/propertyExpansion&gt;\n    &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n    &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;\n    &lt;failsOnError&gt;true&lt;/failsOnError&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> Tag Purpose <code>configLocation</code> The Checkstyle ruleset XML. Use built-in like <code>google_checks.xml</code>, or define your own. <code>suppressionsLocation</code> XML file listing rules/files to ignore. Useful for legacy files or generated code. <code>maxAllowedViolations</code> Maximum allowed rule violations before build fails (usually <code>0</code> for strict mode). <code>propertyExpansion</code> Allows defining variables (like <code>subpackage</code>) for dynamic usage inside the Checkstyle config. <code>encoding</code> Ensures source is read correctly (typically <code>UTF-8</code>). <code>consoleOutput</code> Print violations to the console output for easy debugging. <code>failsOnError</code> Set <code>true</code> to fail build if violations are found. <p><code>propertyExpansion</code> Use Case: <code>subpackage</code></p> <p>This is useful for rules that match or enforce package structure.</p> <p>In POM: <pre><code>&lt;propertyExpansion&gt;\n  &lt;subpackage&gt;com.mycompany.core&lt;/subpackage&gt;\n&lt;/propertyExpansion&gt;\n</code></pre></p> <p>In <code>checkstyle.xml</code>: <pre><code>&lt;module name=\"RegexpPackage\"&gt;\n  &lt;property name=\"format\" value=\"^${subpackage}(\\..+)*$\"/&gt;\n&lt;/module&gt;\n</code></pre></p> <p>This enforces that all classes belong to <code>com.mycompany.core</code> or subpackages.</p> <p>Output Reports</p> <p>When you run:</p> <pre><code>mvn checkstyle:checkstyle\n</code></pre> <p>You\u2019ll get reports in:</p> <pre><code>target/site/checkstyle.html\ntarget/site/checkstyle-result.xml\n</code></pre> Feature Description Code Style Enforcement Enforces consistent formatting and structure Report Generation Outputs HTML and XML reports Fail-on-Violation Ensures CI builds fail when code violates style Configurable Rules Use custom or built-in rules Suppression Support Ignore violations for specific classes/files Property Expansion Inject variables (like <code>subpackage</code>)"},{"location":"spring-boot/maven/#aven-surefire-plugin","title":"aven-surefire-plugin","text":"Goal Description Run unit tests Executes tests written with JUnit, TestNG, or other supported frameworks Integrate with Maven lifecycle Automatically runs tests during the <code>test</code> phase Generate test reports Produces text and XML reports under <code>target/surefire-reports/</code> Detect test failures Fails the build if any unit test fails (configurable) Support test customization Allows inclusion/exclusion patterns, parallel test execution, and filtering <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.0.0-M9&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;includes&gt;\n      &lt;include&gt;**/*Tests.java&lt;/include&gt;\n      &lt;include&gt;**/*Tests.json&lt;/include&gt;\n    &lt;/includes&gt;\n    &lt;runOrder&gt;alphabetical&lt;/runOrder&gt;\n    &lt;reportsDirectory&gt;${project.basedir}/target/surefire-reports&lt;/reportsDirectory&gt;\n    &lt;testFailureIgnore&gt;false&lt;/testFailureIgnore&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"spring-boot/maven/#cheatsheet","title":"cheatsheet","text":"<ol> <li>delete a specific dependency from your local Maven cache (~/.m2/repository) and force Maven to re-download it cleanly from the remote repository       <pre><code>mvn dependency:purge-local-repository -DmanualInclude=\"org.bouncycastle:bcprov-jdk15on\"\n</code></pre></li> </ol>"},{"location":"spring-boot/mmm/","title":"Spring Boot Multi-Module Maven Project","text":"<p>key concepts and configuration examples for setting up a multi-module Maven project using Spring Boot.</p>"},{"location":"spring-boot/mmm/#parent-pom","title":"Parent POM","text":"<p>Provides consistent versions of dependencies across modules.</p> <p>A central <code>pom.xml</code> with <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code> used to manage modules and shared configuration.</p> <ul> <li>Declares <code>&lt;modules&gt;</code> for all child projects.</li> <li>Centralizes dependency and plugin management.</li> <li>Entry point for <code>mvn install</code> or CI builds.</li> </ul>"},{"location":"spring-boot/mmm/#bom-bill-of-materials","title":"BOM (Bill of Materials)","text":"Parent POMManually <p>do use the Spring Boot parent POM:   <pre><code>&lt;parent&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n   &lt;version&gt;3.2.5&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre></p> <p>If not using the Spring Boot parent, then you must import the Spring BOM manually like this:   <pre><code>&lt;dependencyManagement&gt;\n   &lt;dependencies&gt;\n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n         &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n         &lt;version&gt;3.2.5&lt;/version&gt;\n         &lt;type&gt;pom&lt;/type&gt;\n         &lt;scope&gt;import&lt;/scope&gt;\n      &lt;/dependency&gt;\n   &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>   This snippet must go inside your parent POM's  block if not using the spring-boot-starter-parent. <p>This ensures children can declare dependencies without specifying versions.</p>"},{"location":"spring-boot/mmm/#dependency-management","title":"Dependency Management","text":"<p>Define shared dependency versions in the parent:</p> <pre><code>&lt;properties&gt;\n  &lt;lombok.version&gt;1.18.30&lt;/lombok.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencyManagement&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n      &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n      &lt;version&gt;${lombok.version}&lt;/version&gt;\n      &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>"},{"location":"spring-boot/mmm/#plugin-management","title":"Plugin Management","text":"<p>Ensure consistent plugin versions and configuration:</p> <pre><code>&lt;pluginManagement&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n      &lt;version&gt;3.11.0&lt;/version&gt;\n      &lt;configuration&gt;\n        &lt;source&gt;17&lt;/source&gt;\n        &lt;target&gt;17&lt;/target&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/pluginManagement&gt;\n</code></pre>"},{"location":"spring-boot/mmm/#child-module-eg-service-a","title":"Child Module (e.g., <code>service-a</code>)","text":"<p>Each module has its own <code>pom.xml</code> and inherits from the parent.</p> <pre><code>&lt;parent&gt;\n  &lt;groupId&gt;com.example&lt;/groupId&gt;\n  &lt;artifactId&gt;parent-project&lt;/artifactId&gt;\n  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n  &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n   &lt;dependency&gt;\n   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n   &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Define module-specific dependencies under <code>&lt;dependencies&gt;</code>.</p>"},{"location":"spring-boot/mmm/#benefits-of-this-setup","title":"Benefits of This Setup","text":"Benefit Why it Matters Version Consistency Prevents conflicts across modules Central Plugin Control Reduces repetition and errors Scalable Design Suitable for microservices or layered apps Easier CI/CD Integration One entry point for Maven build commands <p>This structure allows for clean, maintainable, and scalable Spring Boot applications using Maven.</p>"},{"location":"system_design/","title":"System Design","text":"<p>Welcome to system design documentation covering architectural patterns, inter-process communication (IPC), and design principles for building scalable systems.</p>"},{"location":"system_design/#overview","title":"Overview","text":"<p>This section covers fundamental concepts and practical implementations for designing distributed systems, with particular focus on high-performance financial and trading systems.</p>"},{"location":"system_design/#topics-covered","title":"Topics Covered","text":""},{"location":"system_design/#architecture-fundamentals","title":"Architecture Fundamentals","text":"<ul> <li>Functional vs Non-Functional Requirements - Understanding system requirements and trade-offs</li> <li>Design patterns for scalable systems</li> <li>Performance considerations and bottlenecks</li> </ul>"},{"location":"system_design/#inter-process-communication-ipc","title":"Inter-Process Communication (IPC)","text":"<ul> <li>IPC Overview - Communication mechanisms between processes</li> <li>Aeron MDC - High-performance messaging patterns</li> <li>Message queuing and event-driven architectures</li> </ul>"},{"location":"system_design/#design-principles","title":"Design Principles","text":"<ul> <li>Scalability patterns</li> <li>Fault tolerance and resilience</li> <li>Load balancing strategies</li> <li>Data consistency models</li> </ul>"},{"location":"system_design/#getting-started","title":"Getting Started","text":"<p>New to System Design?</p> <p>Start with Functional vs Non-Functional Requirements to understand the foundation of system requirements analysis.</p>"},{"location":"system_design/#learning-path","title":"Learning Path","text":"<ol> <li>Requirements Analysis - Learn to identify functional vs non-functional requirements</li> <li>IPC Mechanisms - Understand different communication patterns</li> <li>Architecture Patterns - Apply design principles to real systems</li> <li>Performance Optimization - Implement high-performance solutions</li> </ol>"},{"location":"system_design/#related-topics","title":"Related Topics","text":"<ul> <li>Aeron Messaging - Implementation details for high-performance messaging</li> <li>Java Concurrency - Thread management and concurrent programming</li> <li>KDB+ Integration - Database design for time-series systems</li> </ul>"},{"location":"system_design/#contributing","title":"Contributing","text":"<p>This documentation is continuously updated with new patterns and real-world examples. Each section includes practical implementations and performance benchmarks.</p>"},{"location":"system_design/frAndNfre/","title":"System Design: Functional and Non-Functional Requirements","text":"<p>In system design, requirements are typically divided into two major categories:</p>"},{"location":"system_design/frAndNfre/#fr","title":"FR","text":"<p>Functional requirements define what the system should do \u2014 its behavior, services, and expected operations.</p>"},{"location":"system_design/frAndNfre/#examples","title":"Examples","text":"<ul> <li>User can register, log in, and log out</li> <li>System allows product search and checkout</li> <li>Admin can manage user roles and permissions</li> <li>API endpoint <code>/orders/{id}</code> returns order details in JSON format</li> <li>Scheduled jobs generate daily reports at midnight</li> </ul>"},{"location":"system_design/frAndNfre/#nfr","title":"NFR","text":"<p>Non-functional requirements define how the system performs \u2014 its quality attributes, constraints, and operating conditions.</p>"},{"location":"system_design/frAndNfre/#examples_1","title":"Examples","text":"Category Examples Performance Handle 1000 requests/sec with &lt;200ms latency Scalability System should support horizontal scaling Availability Ensure 99.99% uptime Security All user data must be encrypted at rest and in transit Reliability System should recover from a crash within 5 seconds Maintainability Easy to deploy with CI/CD, modular codebase Portability Support deployment on AWS, Azure, and GCP Compliance Must adhere to GDPR and PCI-DSS standards"},{"location":"system_design/frAndNfre/#summary-table","title":"Summary Table","text":"Type Description Functional Requirements (FR) What the system should do (features, logic) Non-Functional Requirements (NFR) How the system should behave (quality, constraints)"},{"location":"system_design/IPC/ipc/","title":"ipc","text":"<p>this is system_design</p> <ul> <li>aeron IPC</li> <li>aeron mdc</li> <li>rest</li> <li>grpc</li> <li>reactive</li> </ul>"}]}